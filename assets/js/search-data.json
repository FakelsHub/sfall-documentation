{
  "0": {
    "id": "0",
    "title": "",
    "content": "404 Page not found :( The requested page could not be found.",
    "url": "/sfall-documentation/404.html",
    "relUrl": "/404.html"
  },
  "1": {
    "id": "1",
    "title": "Alter min/max",
    "content": "Alter min/max Can be used to set the valid ranges on on stats. Values returned by get_current_stat will be clamped to this range. The set_pc_ function only effect the player, the set_npc_ functions only effect other critters, and the set_ functions effect both. set_npc_stat_max set_npc_stat_min set_pc_stat_max set_pc_stat_min set_stat_max set_stat_min set_npc_stat_max void set_npc_stat_max(int stat, int value) set_npc_stat_min void set_npc_stat_min(int stat, int value) set_pc_stat_max void set_pc_stat_max(int stat, int value) set_pc_stat_min void set_pc_stat_min(int stat, int value) set_stat_max void set_stat_max(int stat, int value) set_stat_min void set_stat_min(int stat, int value)",
    "url": "/sfall-documentation/alter-min-max/",
    "relUrl": "/alter-min-max/"
  },
  "2": {
    "id": "2",
    "title": "Array functions",
    "content": "Array functions array_key arrayexpr create_array fix_array free_array get_array len_array load_array resize_array save_array scan_array set_array temp_array array_key mixed array_key(int arrayID, int index) Don’t use it directly; it is generated by the compiler in foreach loops. arrayexpr int arrayexpr(mixed key, mixed value) Don’t use it directly; it is used by compiler to create array expressions. create_array int create_array(int size, int nothing) Creates permanent array (but not “saved”). fix_array void fix_array(int arrayID) Changes “temporary” array into “permanent” (“permanent” arrays are not automatically saved into savegames). free_array void free_array(int arrayID) Deletes any array. get_array mixed get_array(int arrayID, mixed key) Returns array value by key or index (shorthand: arrayID[key]). len_array int len_array(int arrayID) Returns number of elements or key=&gt;value pairs in a given array. load_array int load_array(mixed key) Load array from savegame data by the same key provided in “save_array”. resize_array void resize_array(int arrayID, int size) Changes array size. save_array void save_array(mixed key, int arrayID) Array is saved (arrayID is associated with given “key”). scan_array mixed scan_array(int arrayID, mixed value) Searches for a first occurence of given value inside given array. set_array void set_array(int arrayID, mixed key, mixed value) Sets array value (shorthand: arrayID[key] := value). temp_array int temp_array(int size, int nothing) Works exactly like “create_array”, only created array becomes “temporary.”",
    "url": "/sfall-documentation/array-functions/",
    "relUrl": "/array-functions/"
  },
  "3": {
    "id": "3",
    "title": "Arrays",
    "content": "Arrays sfall introduces new method of storing variables - arrays. Array is basically a container which can store variable number of values (elements). Each element in array can be of any type. Arrays can be extremely useful for some more advanced scripting, in conjunction with loops. See array function reference here. Arrays concept Example: Example: Arrays syntax Storing arrays Example: Practical examples Use arrays to implement variable-argument procedures Create arrays of objects (maps) for advanced scripting Array operators reference Backward compatibility notes Arrays concept Array elements are accessed by index or key. Example: // this code puts some string in array &quot;list&quot; at index 5: list[5] := &quot;Value&quot;; There are 2 different types of arrays currently available: Lists - a set of values with specific size (number of elements), where all elements have numeric indexes starting from zero (0) up to array length minus one. Example: // this creates list with 3 elements. Element &quot;A&quot; has index 0, element &quot;B&quot; has index 1, element &quot;C&quot; - 2 list := [&quot;A&quot;, &quot;B&quot;, &quot;C&quot;]; Limitations: all indexes are numeric, starting from 0; to assign value to a specific index, you must first resize array to contain this index (for example, if list is of size 3 (indexes from 0 to 2), you can’t assign value to index 4 unless you change list size to 5 first). Maps (or associative arrays) - a set of key=&gt;value pairs, where all elements (values) are accessed by corresponding keys. Differences from list: maps don’t have specific size (to assign values, you don’t need to resize array first); keys, just like values, can be of any type (but avoid using -1 as array keys or you won’t be able to use some functions reliably). Both array types have their pros and cons and are suited for different tasks. Arrays syntax Basically arrays are implemented using number of new operators (scripting functions). But for ease of use, there are some new syntax elements: Accessing elements. Use square brackets: display_msg(arr[5]); mymap[&quot;price&quot;] := 515.23; Alternative accessing for maps. Use dot: display_msg(mymap.name); mymap.price := 232.23; Array expressions. Create and fill arrays with just one expression: // create list with 5 values [5, 777, 0, 3.14, &quot;Cool Value&quot;] // create map: {5: &quot;Five&quot;, &quot;health&quot;: 50, &quot;speed&quot;: 0.252} NOTES: Make sure to call fix_array if you want new array to be available in the next frame or save_array if you want to use it for a longer period (see next section for details). Iterating in loop. Use “foreach” key word like this: foreach (item in myarray) begin // this block is executed for each array element, where &quot;item&quot; contains current value on each step end // alternative syntax: foreach (key: item in myarray) begin // &quot;key&quot; will contain current key (or numeric index, for lists) end See “Script editor docs sslc readme.txt” file for full information on new SSL syntax features. Storing arrays Apart from lists/maps arrays are divided by how they are stored. There a 3 types of arrays: Temporary. They are created using temp_array function or when using array expressions. Arrays of this type are auto-deleted at the end of the frame. So, for example, if you have a global script which runs at regular intervals, where you create temp_array, it will not be available next time your global script is executed. Permanent. They are created using create_array function or fix_array (from pre-existing temporary array). This type of arrays are always available (by their ID) until you start a new game or load a saved game (at which point they are deleted). Saved. If you want your array to really stay for a while, use function save_array to make any array “saved”. However, they are, like permanent arrays, “deleted” from memory when loading game. In order to use them properly, you must load them from the savegame using load_array whenever you want to use them. Example: variable savedArray; procedure start begin if game_loaded then begin savedArray := load_array(&quot;traps&quot;); end else begin foreach trap in traps begin .... end end end Practical examples Use arrays to implement variable-argument procedures // define it procedure give_item(variable critter, variable pidList) begin foreach (pid: qty in pidList) begin give_pid_qty(critter, pid, qty); end end // call it: call give_item(dude_obj, {PID_SHOTGUN: 1, PID_SHOTGUN_SHELLS: 4, PID_STIMPAK: 3}); Create arrays of objects (maps) for advanced scripting variable traps; procedure init_traps begin // just a quick example, there is a better way of doing it... traps := load_array(&quot;traps&quot;); if (traps == 0) then begin traps := []; save_array(&quot;traps&quot;, traps); end foreach k: v in traps begin traps[k] := load_array(&quot;trap_&quot;+k); // each object is stored separately end end procedure add_trap(variable trapArray) begin variable index; index := len_array(traps); save_array(&quot;trap_&quot;+k, trapArray); array_push(traps, trapArray); end // use them: foreach trap in traps begin if (self_elevation == trap[&quot;elev&quot;] and tile_distance(self_tile, trap[&quot;tile&quot;]) &lt; trap[&quot;radius&quot;]) then // kaboom!!! end end Array operators reference *mixed means any type int create_array(int size, int flags): creates permanent array (but not “saved”) if size is &gt;= 0, creates list with given size if size == -1, creates map (associative array) if size == -1 and flags == 2, creates a “lookup” map in which the values of existing keys are read-only and can’t be updated. This type of array allows you to store a zero (0) key value NOTE: in earlier versions (up to 4.1.3/3.8.13) the second argument is not used, just use 0 returns arrayID (valid until array is deleted) int temp_array(int size, int flags): works exactly like create_array, only created array becomes “temporary” void fix_array(int arrayID): changes “temporary” array into “permanent” (“permanent” arrays are not automatically saved into savegames) void set_array(int arrayID, mixed key, mixed value): sets array value if used on list, “key” must be numeric and within valid index range (0..size-1) if used on map, key can be of any type to “unset” a value from map, just set it to zero (0) NOTE: to add a value of 0 for the key, use the float value of 0.0 this works exactly like statement: arrayID[key] := value; mixed get_array(int arrayID, mixed key): returns array value by key or index if key doesn’t exist or index is not in valid range, returns 0 works exactly like expression: (arrayID[key]) void resize_array(int arrayID, int size): changes array size applicable to maps too, but only to reduce elements there are number of special negative values of “size” which perform various operations on the array, use macros sort_array, sort_array_reverse, reverse_array, shuffle_array from sfall.h header void free_array(int arrayID): deletes any array if array was “saved”, it will be removed from a savegame mixed scan_array(int arrayID, mixed value): searches for a first occurence of given value inside given array if value is found, returns it’s index (for lists) or key (for maps) if value is not found, returns -1 (be careful, as -1 can be a valid key for a map) int len_array(int arrayID): returns number of elements or key=&gt;value pairs in a given array if array is not found, returns -1 (can be used to check if given array exist) mixed array_key(int arrayID, int index): don’t use it directly; it is generated by the compiler in foreach loops for lists, returns index back (no change) for maps, returns a key at the specified numeric index (don’t rely on the order in which keys are stored though) can be checked if given array is associative or not, by using index (-1): 0 - array is list, 1 - array is map int arrayexpr(mixed key, mixed value): don’t use it directly; it is used by compiler to create array expressions assigns value to a given key in an array, created by last create_array or temp_array call always returns 0 void save_array(mixed key, int arrayID): arrayID is associated with given “key” array becomes permanent (if it was temporary) and “saved” key can be of any type (int, float or string) int load_array(mixed key): load array from savegame data by the same key provided in save_array arrayID is returned or zero (0) if none found Backward compatibility notes For those who used arrays in their mods before sfall 3.4: There is an INI parameter arraysBehavior in “Misc” section of ddraw.ini. If set to 0, all scripts which used sfall arrays before should work. This basically changes that create_array will create permanent arrays which are “saved” by default and their ID is also permanent. It is 1 by default. If arraysBehaviour=0: Arrays are created and manipulated with the xxx_array functions. An array must first be created with create_array or temp_array, specifying how many data elements the array can hold. You can store any of ints, floats and strings in an array, and can mix all 3 in a single array. The id returned by create/temp_array can then be used with the other array functions. Arrays are shared between all scripts. (i.e. you can call create_array from one script, and then use the returned id from another script.) They are also saved across savegames. You must remember to free any arrays you create with create_array when you are done with them, or you will leak memory. arrays created with temp_array will be automatically freed at the end of the frame. These functions are safe, in that supplying a bad id or trying to access out of range elements will not crash the script. create_array is the only function that returns a permanent array, all other functions which return arrays (string_split, list_as_array etc,) all return temp arrays. You can use fix_array to make a temp array permanent. How savegame compatibility is handled? Saved arrays are stored in sfallgv.sav file (in savegame) in new (more flexible) format, just after the old arrays. So basically, when you load older savegame, sfall will load arrays from old format and save them to new format on next game save. If you load savegame made with sfall 3.4 using sfall 3.3 (for example), game shouldn’t crash, but all arrays will be lost. Previously you had to specify size in bytes for array elements. This parameter is now ignored and you can store strings of arbitrary length in arrays.",
    "url": "/sfall-documentation/arrays/",
    "relUrl": "/arrays/"
  },
  "4": {
    "id": "4",
    "title": "Art and Animations",
    "content": "Art and Animations art_exists refresh_pc_art reg_anim_animate_and_hide reg_anim_change_fid reg_anim_combat_check reg_anim_destroy reg_anim_light reg_anim_take_out reg_anim_turn_towards art_exists int art_exists(int artFID) checks if given artFID exists in the game. Useful when you want to check if critter can use specific weapon: art_exists((artFid bwand 0xffff0fff) bwor (weaponAnim * 0x1000)). refresh_pc_art void refresh_pc_art reg_anim_animate_and_hide void reg_anim_animate_and_hide(ObjPtr, int animID, int delay) Exactly like reg_anim_animate but the object will automatically disappear after the last animation frame (but not destroyed). reg_anim_change_fid void reg_anim_change_fid(ObjPtr, int FID, int delay) Should work like art_change_fid_num but in reg_anim sequence. reg_anim_combat_check void reg_anim_combat_check(int enable) Allows to enable all reg_anim_* functions in combat (including vanilla functions) if set to 0. It is automatically reset at the end of each frame, so you need to call it before reg_anim_begin - reg_anim_end block. reg_anim_destroy void reg_anim_destroy(ObjPtr) Given object is destroyed at the end of current animation set. reg_anim_light void reg_anim_light(ObjPtr, int light, int delay) Change light of any object. Light argument is a light radius (0-8), but you can use highest 2 bytes to pass light intensity as well (example: 0xFFFF0008 - intensity 65535 and radius 8). If highest 2 bytes are 0, intensity will not be changed. Intensity range is from 0 to 65535 (0xFFFF) reg_anim_take_out void reg_anim_take_out(ObjPtr, holdFrameID, delay) Plays “take out weapon” animation for given holdFrameID. It is not required to have such weapon in critter’s inventory. reg_anim_turn_towards void reg_anim_turn_towards(ObjPtr, int tile/target, delay) Makes object change its direction to face given tile num or target object.",
    "url": "/sfall-documentation/art-and-animations/",
    "relUrl": "/art-and-animations/"
  },
  "5": {
    "id": "5",
    "title": "Best practices",
    "content": "Best practices Mod compatibility Performance Mod compatibility If it can be done in a global script, do it in a global script. Combined with hooks, they are extremely powerful, possibilities ranging from creating new perks to UI scripting to prototype altering on-the-fly. While scripting does take a bit longer to get started, and hacking prototypes directly with GUI programs might look easier at first, consider that: Scripts from different mods modifying the same thing can actually be compatible with each other. Binary files can’t. Scripts can be version controlled and thus are much more easier to maintain. If you’re using set_sfall_return, always couple it with set_sfall_arg for the corresponding arg(s), unless you have a specific reason not to. Detailed explanation is available here. Pick yourself a 2-3 character modding prefix. Use it for: global script names global variable names and saved array names debug messages This will ensure (to some degree), that another mod doesn’t overwrite your scripts, doesn’t mess with your global variables, and that debug messages coming from your scripts can be distinguished easily. For example, if you pick prefix “a_”, your script could be named gl_a_myscript.int, and might look like this: #define S_NAME &quot;gl_a_myscript&quot; #define ndebug(message) debug_msg(S_NAME + &quot;: &quot; + message + &quot; n&quot;) procedure start begin if game_loaded then begin set_sfall_global(&quot;a_myvar&quot;, 1000); ndebug(&quot;initialized&quot;); end end ... Performance Do not abuse sfall global variables and saved arrays. This will lead to savegame bloating. But do use them if necessary, they are added for a reason. Do not abuse set_global_script_repeat. Whenever possible, register your script as a hook instead. You can register the same procedure at multiple hook points, if necessary. If you have set_global_script_repeat(300) in your script, you’re probably doing something wrong. That’s an invocation every 3-5 seconds, approximately. If you have set_global_script_repeat(30), you are definitely doing something wrong. Look for suitable hooks harder, think of another way for implementing it, ask fellow modders for help.",
    "url": "/sfall-documentation/best-practices/",
    "relUrl": "/best-practices/"
  },
  "6": {
    "id": "6",
    "title": "Call offset",
    "content": "Call offset Can be used to call arbitrary functions inside Fallout. Different versions are used to call functions with different numbers of arguments. None of these functions will work unless AllowUnsafeScripting is enabled in ddraw.ini. call_offset_r0 call_offset_r1 call_offset_r2 call_offset_r3 call_offset_r4 call_offset_v0 call_offset_v1 call_offset_v2 call_offset_v3 call_offset_v4 call_offset_r0 UNSAFE int call_offset_r0(int address) call_offset_r1 UNSAFE int call_offset_r1(int address, int arg1) call_offset_r2 UNSAFE int call_offset_r2(int address, int arg1, int arg2) call_offset_r3 UNSAFE int call_offset_r3(int address, int arg1, int arg2, int arg3) call_offset_r4 UNSAFE int call_offset_r4(int address, int arg1, int arg2, int arg3, int arg4) call_offset_v0 UNSAFE void call_offset_v0(int address) call_offset_v1 UNSAFE void call_offset_v1(int address, int arg1) call_offset_v2 UNSAFE void call_offset_v2(int address, int arg1, int arg2) call_offset_v3 UNSAFE void call_offset_v3(int address, int arg1, int arg2, int arg3) call_offset_v4 UNSAFE void call_offset_v4(int address, int arg1, int arg2, int arg3, int arg4)",
    "url": "/sfall-documentation/call-offset/",
    "relUrl": "/call-offset/"
  },
  "7": {
    "id": "7",
    "title": "Combat",
    "content": "Combat block_combat disable_aimed_shots force_aimed_shots get_attack_type get_bodypart_hit_modifier get_kill_counter get_last_attacker get_last_target mod_kill_counter set_base_hit_chance_mod set_bodypart_hit_modifier set_critter_burst_disable set_critter_hit_chance_mod set_hit_chance_max block_combat void block_combat(bool value) Deny the player to enter combat mode. disable_aimed_shots void disable_aimed_shots(int pid) Allows overriding the normal rules regarding which weapons are allowed to make aimed attacks. (e.g. weapons that cause explosive damage normally cannot normally make aimed shots.) stops a weapon from making aimed shots even if it normally coulld. Affects player and NPCs alike. The list of edited weapons is not saved over game loads, so you need to call the function once at each reload. Use a pid of 0 to represent unarmed. force_aimed_shots void force_aimed_shots(int pid) Allows overriding the normal rules regarding which weapons are allowed to make aimed attacks. (e.g. weapons that cause explosive damage normally cannot normally make aimed shots.) Will allow a weapon to make aimed shots even if it normally couldn’t. Affects player and NPCs alike. Does not override the effects of the fast shot trait. The list of edited weapons is not saved over game loads, so you need to call the function once at each reload. Use a pid of 0 to represent unarmed. get_attack_type int get_attack_type get_bodypart_hit_modifier int get_bodypart_hit_modifier(int bodypart) Gets the hit percentage modifiers for aiming at specific bodyparts. Valid bodypart id’s are from 0 to 8. get_kill_counter int get_kill_counter(int critterType) get_last_attacker ObjectPtr get_last_attacker(ObjPtr critter) Will return the last critter to deliberately launch an attack against the argument critter. If a critter has not launched/received an attack, it will return 0. Outside of combat always returns 0. get_last_target ObjectPtr get_last_target(ObjPtr critter) Will return the last critter to be deliberately attacked. Outside of combat always returns 0. mod_kill_counter void mod_kill_counter(int critterType, int amount) set_base_hit_chance_mod void set_base_hit_chance_mod(int max, int mod) set_bodypart_hit_modifier void set_bodypart_hit_modifier(int bodypart, int value) Alters the hit percentage modifiers for aiming at specific bodyparts. Valid bodypart id’s are from 0 to 8. Changes are not saved, and will reset to the defaults (or to the values specified in ddraw.ini if they exist) at each reload. set_critter_burst_disable void set_critter_burst_disable(int critter, int disable) set_critter_hit_chance_mod void set_critter_hit_chance_mod(CritterPtr, int max, int mod) set_hit_chance_max void set_hit_chance_max(int percentage) Effects all critters rather than just the player.",
    "url": "/sfall-documentation/combat/",
    "relUrl": "/combat/"
  },
  "8": {
    "id": "8",
    "title": "Critical table",
    "content": "Critical table get_critical_table reset_critical_table set_critical_table get_critical_table int get_critical_table(int crittertype, int bodypart, int level, int valuetype) Gets current critical table. For details see critical hit tables. Requires OverrideCriticalTable to be set to 1 in ddraw.ini. (Disabled by default, because it noticably increases loading times.) reset_critical_table void reset_critical_table(int crittertype, int bodypart, int level, int valuetype) Resets the critical table to default (or to the contents of CriticalOverrides.ini, if it exists). For details see ‘http://falloutmods.wikia.com/wiki/Critical_hit_tables’. Requires OverrideCriticalTable to be set to 1 in ddraw.ini. (Disabled by default, because it noticably increases loading times.) set_critical_table void set_critical_table(int crittertype, int bodypart, int level, int valuetype, int value) Used for modifying the critical table. For details see critical hit tables. Changes are not saved, and will reset to the defaults, (or to the contents of CriticalOverrides.ini, if it exists) at each game reload. Requires OverrideCriticalTable to be set to 1 in ddraw.ini. (Disabled by default, because it noticably increases loading times.)",
    "url": "/sfall-documentation/critical-table/",
    "relUrl": "/critical-table/"
  },
  "9": {
    "id": "9",
    "title": "Data types",
    "content": "Data types Data types mentioned in this document void - means opcode does not return any value any - any type int - integer number float - floating point number string - string (text) value object - pointer to game object (actually an integer) array - array ID to be used with array-related functions (actually an integer)",
    "url": "/sfall-documentation/data-types/",
    "relUrl": "/data-types/"
  },
  "10": {
    "id": "10",
    "title": "Direct memory access",
    "content": "",
    "url": "/sfall-documentation/direct-memory-access/",
    "relUrl": "/direct-memory-access/"
  },
  "11": {
    "id": "11",
    "title": "Explosions",
    "content": "Explosions get_explosion_damage metarule2_explosions set_attack_explosion_art set_attack_explosion_pattern set_attack_explosion_radius set_attack_is_explosion_fire set_dynamite_damage set_explosion_max_targets set_explosion_radius set_plastic_damage get_explosion_damage MACRO array get_explosion_damage(itemPid) Returns array of the minimum and maximum damage of the explosive item. metarule2_explosions int metarule2_explosions(int arg1, int arg2) Was made as a dirty easy hack to allow dynamically change some explosion parameters (ranged attack). All changed parameters are reset to vanilla state automatically after each attack action. set_attack_explosion_art MACRO void set_attack_explosion_art(x, y) Y not used and X is a misc frame ID (last 3 bytes, without object type) to use for the next explosion. set_attack_explosion_pattern MACRO void set_attack_explosion_pattern(x, y) Currently Y is not used and X means: 1 - reduced explosion pattern (3 effects are spawned instead of 7), 0 - full pattern. set_attack_explosion_radius MACRO void set_attack_explosion_radius(x) Changes radius at which explosion will hit secondary targets for the next attack (from the experiments it is limited to something around 8 by the engine). set_attack_is_explosion_fire MACRO void set_attack_is_explosion_fire If you call this right before using a weapon with fire damage type (e.g. in HOOK_AFTERHITROLL), it will produce explosion effects (and radius damage) just like “explosion” type, but all targets will still receive fire damage. set_dynamite_damage MACRO void set_dynamite_damage(minDmg, maxDmg) Sets the minimum and maximum damage for Dynamite. Changed damage will be reset each time the player reloads the game. set_explosion_max_targets MACRO void set_explosion_max_targets(x) Sets the maximum number of additional targets for an explosion, valid range: 1..6 (default is 6). set_explosion_radius MACRO void set_explosion_radius(grenade, rocket) Sets a permanent radius of the explosion for grenades and/or rockets. Passing 0 means not changing the corresponding radius. Changed radius will be reset each time the player reloads the game. set_plastic_damage MACRO void set_plastic_damage(minDmg, maxDmg) Sets the minimum and maximum damage for Plastic Explosives. Changed damage will be reset each time the player reloads the game.",
    "url": "/sfall-documentation/explosions/",
    "relUrl": "/explosions/"
  },
  "12": {
    "id": "12",
    "title": "FuncX macros",
    "content": "FuncX macros add_extra_msg_file add_iface_tag art_cache_clear attack_is_aimed car_gas_amount create_win critter_inven_obj2 dialog_message dialog_obj display_stats draw_image draw_image_scaled exec_map_update_scripts get_can_rest_on_map get_current_inven_size get_cursor_mode get_flags get_ini_section get_ini_sections get_metarule_table get_object_ai_data get_object_data get_outline get_string_pointer intface_hide intface_is_hidden intface_redraw intface_show inventory_redraw item_make_explosive item_weight lock_is_jammed loot_obj metarule_exist npc_engine_level_up obj_under_cursor outlined_object real_dude_obj set_can_rest_on_map set_car_intface_art set_cursor_mode set_drugs_data set_dude_obj set_flags set_iface_tag_text set_ini_setting set_object_data set_outline set_rest_heal_time set_rest_mode set_unique_id set_unjam_locks_time spatial_radius unjam_lock add_extra_msg_file void add_extra_msg_file(string fileName, int fileNumber) Loads the custom message file and assigns it with the specified ID number. fileName: the name of the custom message file (including the .msg extension) in text &lt;language&gt; game directory. fileNumber: the file ID number for the message_str_game function to get messages from the file. The available range is from 0x3000 to 0x3FFF. add_iface_tag void add_iface_tag() Adds one custom box to the current boxes, and returns the number of the added tag (-1 if the tags limit is exceeded. The maximum number of boxes is limited to 126 tags. art_cache_clear void art_cache_clear() Clears the cache of FRM image files loaded into memory. attack_is_aimed bool attack_is_aimed() Returns 1 if the aimed attack mode is selected, 0 otherwise. car_gas_amount int car_gas_amount() Returns current amount of fuel in player’s car (between 0 and 80000). Note: To change fuel amount, use vanilla function: metarule(METARULE_GIVE_CAR_GAS, amount) - amount can be positive or negative. create_win void create_win(string winName, int x, int y, int width, int height, int flags) Works just like vanilla CreateWin function, but creates a window with MoveOnTop flag if the flags argument is not specified, and allows to set additional flags for the created window. MoveOnTop: flag allows the created window to be placed on top of the game interface. flags: argument is optional. Macro from: void sfall_func5(&quot;create_win&quot;, string winName, int x, int y, int width, int height) void sfall_func6(&quot;create_win&quot;, string winName, int x, int y, int width, int height, int flags) critter_inven_obj2 ObjectPtr critter_inven_obj2(ObjectPtr obj, int type) Works just like vanilla critter_inven_obj, but correctly reports item in player’s inactive hand slot. dialog_message void dialog_message(string text) Risplays a message in the NPC response window in dialog or barter screen. dialog_obj ObjPtr dialog_obj() Returns a pointer to the object (critter) the player is having a conversation or bartering with. display_stats void display_stats() Updates player stats in the inventory screen display window. Works only in opened player inventory. draw_image void draw_image(string/int pathFile/artId, int frame, int x, int y, bool noTransparent) displays the specified FRM image in the active window created by vanilla CreateWin or sfall’s create_win script function pathFile/artId: path to the FRM file (e.g. “art inven 5mmap.frm”), or its FRM ID number (e.g. 117440550, see specification of the FID format) optional arguments: frame: frame number, the first frame starts from zero x/y: offset relative to the top-left corner of the window noTransparent: pass true to display an image without transparent background NOTE: to omit optional arguments starting from the right, call the functions with different sfall_funcX (e.g. sfall_func4(&quot;draw_image&quot;, pathFile, frame, x, y)) draw_image_scaled void draw_image_scaled(string/int pathFile/artId, int frame, int x, int y, int width, int height) displays the specified FRM image in the active window created by vanilla CreateWin or sfall’s create_win script function pathFile/artId: path to the FRM file (e.g. art inven 5mmap.frm), or its FRM ID number (e.g. 117440550, see specification of the FID format) optional arguments: frame: frame number, the first frame starts from zero x/y: offset relative to the top-left corner of the window width/height: image size, used to scale the image when displaying it. Pass -1 to either width or height to keep the aspect ratio when scaling NOTE: to omit optional arguments starting from the right, call the functions with different sfall_funcX (e.g. sfall_func4(&quot;draw_image&quot;, pathFile, frame, x, y)) if called without x/y/width/height arguments, the image will be scaled to fit the window without transparent background exec_map_update_scripts void exec_map_update_scripts() Executes map_update_p_proc for all objects on map and global/hook scripts as well. get_can_rest_on_map get_can_rest_on_map(int mapNum, int elev) Returns the set rest value of the map after using the set_can_rest_on_map function. Returns -1 if the rest value of the map was not previously set (i.e. no data for the map in sfalldb.sav). The can_rest_here values in maps.txt are ignored. get_current_inven_size get_current_inven_size(ObjPtr object) Returns the current inventory size of the container or the critter. get_cursor_mode int get_cursor_mode() Returns the current cursor mode. Values: 0 - movement cursor, 1 - command cursor, 2 - targeting cursor, 4 to 10 are Skilldex skills (yellow targeting cursor). get_flags int get_flags(ObjectPtr obj) Gets the current value of object flags (see define_extra.h for available flags). get_ini_section array get_ini_section(string file, string sect) Returns an associative array of keys and values for a given INI file and section. get_ini_sections array get_ini_sections(string file) Returns an array of names of all sections in a given INI file. get_metarule_table array get_metarule_table Returns names of all currently available scripting functions. get_object_ai_data int get_object_ai_data(ObjPtr object, int aiParam) Returns the setting value from the AI packet of an object (critter). Use AI_CAP_* constants from define_extra.h for the aiParam argument to get AI value. get_object_data get_object_data(ObjPtr object, int offset) Returns the data at the specified offset of an object (see OBJ_DATA_* constants in define_extra.h for offsets). get_outline int get_outline(ObjectPtr obj) Gets the current outline color for an object. get_string_pointer int get_string_pointer(string text) Returns a pointer to a string variable or to a text. intface_hide void intface_hide() Hides main interface. intface_is_hidden bool intface_is_hidden() Returns 1 if interface is currently hidden, 0 otherwise. intface_redraw void intface_redraw() Redraws main game interface. Useful after direct changes to current player weapons or stats to reflect changes. intface_show void intface_show() Shows main interface. inventory_redraw void inventory_redraw(invSide) Redraws inventory items list in the inventory/loot/barter screens. Argument invSide specifies which side needs to be redrawn: 0 - the player, 1 - target (container/NPC in loot/barter screens). item_make_explosive void item_make_explosive(int pid, int activePid, int minDamage, int maxDamage) makes the specified item (pid) an explosive item like Dynamite or Plastic Explosives maxDamage is optional activePid is for an item with an active timer, can be the same as the pid argument the item proto must be “Misc Item” type and have “Use” action flag minDamage/maxDamage are the minimum and maximum explosion damage using the function on an item that is already set as an explosive will override its previous settings NOTE: this function does not work for pids of Dynamite and Plastic Explosives item_weight int item_weight(ObjectPtr obj) Gets the current weight of an object. lock_is_jammed bool lock_is_jammed(ObjectPtr obj) Returns 1 if the lock (container or scenery) is currently jammed, 0 otherwise. loot_obj ObjPtr loot_obj() Returns a pointer to the target object (container or critter) of the loot screen. metarule_exist bool metarule_exist(string metaruleName) Returns True if the specified name of metarule (sfall_funcX) function exists in the current version of sfall. npc_engine_level_up void npc_engine_level_up(bool toggle) Enables/disables the engine function that increases the level of party members in the player leveling process. If the engine function is disabled, the process of leveling up party members should be performed by script functions. obj_under_cursor ObjPtr obj_under_cursor(bool crSwitch, bool inclDude) Returns the object under the cursor on the main game screen. crSwitch: True - only checks critters and ignores their cover (roof tiles, walls, scenery, etc.), False - checks all objects (can’t check critters under objects). Passing False to the inclDude argument will ignore dude_obj outlined_object ObjectPtr outlined_object() Returns an object that is currently highlighted by hovering the mouse above it. real_dude_obj ObjectPtr real_dude_obj() Returns the initial dude_obj after set_dude_obj was used. set_can_rest_on_map void set_can_rest_on_map(int mapNum, int elev, bool value) Allows/disallows to rest on the map for the specified level, overrides the can_rest_here values in maps.txt. mapNum is the map index from maps.txt passing -1 to the elev argument will set the rest value for all map elevations the set rest value will be stored in sfalldb.sav file (in savegame) set_car_intface_art void set_car_intface_art(int artIndex) Changes the interface art (index in LST file) for the car image on worldmap screen. Should be called before going to worldmap. Vanilla art index is 0x1B1. set_cursor_mode void set_cursor_mode(int mode) Sets the current cursor mode. set_drugs_data void set_drugs_data(int type, int pid, int value) Overrides the parameters of drugs set in the configuration file (DrugsFile setting in ddraw.ini). Type: 0 - changes the value of NumEffects for the drug (see Drugs.ini for the description of NumEffects), 1 - changes the duration of the addiction effect for the drug (a value of 1 = one game minute). set_dude_obj void set_dude_obj(ObjectPtr critter) Take control of a given critter. Passing value 0 will reset control back to “real” dude. set_flags void set_flags(ObjectPtr obj, int flags) Sets the current flags of an object. All flags are rewritten with given integer, so first get current flags with get_flags and use bwor/bwand to set/remove specific flag. set_iface_tag_text void set_iface_tag_text(int tag, string text, int color) Sets the text messages and colors for custom notification boxes to the interface without the need to add messages to intrface.msg and set up the font colors in ddraw.ini. Tag value is the same as used in show_iface_tag, hide_iface_tag, and is_iface_tag_active. The valid range is from 5 to (4 + the value of BoxBarCount in ddraw.ini) or the number of the last custom box added using the add_iface_tag function. The text is limited to 19 characters. set_ini_setting void set_ini_setting(string setting, int/string value) Writes an integer or a string value to an ini file in the Fallout directory. If the ini file does not exist, it will be created The setting argument works in the same way as in get_ini_setting, seperate the file name, section and key with a “|” character. Note: the file name is limited to 63 chars (including the extension), the section name is limited to 32 characters. set_object_data set_object_data(ObjPtr object, int offset, int data) Sets the data at the specified offset of an object. set_outline void set_outline(ObjectPtr obj, int color) Sets the outline color of an object. 0 means or any value above 0x00FFFFFF disables the outline. Call tile_refresh_display after changing outline of objects to properly redraw the scene. set_rest_heal_time void set_rest_heal_time(int time) Sets the time interval in minutes for healing during resting. The default is 180. Note: The interval will be reset each time the player reloads the game. set_rest_mode void set_rest_mode(int flags) Sets the bit flags for the rest mode (see RESTMODE_* constants in sfall.h). Passing 0 will reset the rest mode. It will also be reset each time the player reloads the game. set_unique_id int set_unique_id(ObjPtr object, int flag) Assigns a unique ID number to the object and returns it. If a unique ID number has already been assigned to an object, then ID number is returned without reassignment. flag is optional. items with unique IDs will not stack with other items of the same type in the inventory to just get the current ID number of an object, use get_object_data(object, OBJ_DATA_ID) unique ID numbers are saved in your savegame, and have a range from 0x10000000 to 0x7FFFFFFF there is also a unique ID number range for the player and party members from 18000 to 83535 to assign a new ID number generated by the engine to the object (i.e. unassign a unique ID), call the function with two arguments and pass -1 for the flag argument set_unjam_locks_time void set_unjam_locks_time(int time) Sets after how many hours (up to 127 hours) jammed locks will be unjammed if the player leaves the map. Also disables the auto unjam that occurs at midnight when the player is on the map. Passing 0 will disable the auto unjam mechanism completely. The auto unjam mechanism will be reset each time the player reloads the game. spatial_radius int spatial_radius(ObjectPtr obj) Returns radius of spatial script, associated with given dummy-object (returned by create_spatial). unjam_lock void unjam_lock(ObjectPtr obj) Unjams a lock immediately without having to wait until the next day, or leave the map and then return after 24 hours. Does not work in use_skill_on_p_proc procedure.",
    "url": "/sfall-documentation/funcx-macros/",
    "relUrl": "/funcx-macros/"
  },
  "13": {
    "id": "13",
    "title": "Global script functions",
    "content": "Global script functions available_global_script_types game_loaded get_game_mode set_global_script_repeat set_global_script_type set_self typeof available_global_script_types int available_global_script_types game_loaded int game_loaded() Returns 1 the first time it is called after a new game or game load, and 0 any time after. It works on an individual basis for each script, so one script wont interfere with others. Its primary use is for global scripts, so that they know when to call set_global_script_repeat, but it can be called from normal scripts too. get_game_mode int get_game_mode() A more flexible version of in_world_map. It will return a set of flags indicating which mode the game is currently in. These flags are the same as those used in the set_shader_mode function. set_global_script_repeat void set_global_script_repeat(int frames) Only has an effect on the script it is called from. Every global script needs its own game_loaded block to correctly set up repeat rate. Will have no effect if called on a non-global script. set_global_script_type void set_global_script_type(int type) Only has an effect on the script it is called from. Every global script needs its own game_loaded block to correctly set up the script type. set_self void set_self(ObjPtr) Overrides the script’s self_obj for the next function call. It is primarily used to allow the calling of functions which take an implicit self_obj parameter (e.g. drop_obj) from global scripts, but it can also be used from normal scripts. Will revert back to its original value after the next function call. Calling self_obj(0) will also revert self_obj to original value. It is recommended to call this after each use of set_self in normal scripts in order to avoid unforeseen side effects. source_obj, target_obj, and similar functions will not work if preceded by set_self. NOTE: for use_obj/use_obj_on_obj vanilla functions to work correctly, it is required to call set_self twice. typeof int typeof(any value) Returns type of the given value: VALTYPE_INT, VALTYPE_FLOAT or VALTYPE_STR.",
    "url": "/sfall-documentation/global-script-functions/",
    "relUrl": "/global-script-functions/"
  },
  "14": {
    "id": "14",
    "title": "Global scripts",
    "content": "Global scripts As well as the new functions, sfall also adds global scripts. These run independent of any loaded maps, but do not have an attached object. (i.e. using self_obj without using set_self first will crash the script.) To use a global script, the script must have a name which begins with gl and contains a procedure called start, map_enter_p_proc, map_exit_p_proc, or map_update_p_proc. The start procedure will be executed once when the player loads a saved game or starts a new game. The map_*_p_proc procedures will be executed once when a map is being entered/left/updated. If you wish the script to be executed repeatedly, call set_global_script_repeat on the first run of the start procedure using the number of frames between each run as the argument. (0 disables the script, 1 runs it every frame, 2 runs it every other frame etc.) Global scripts have multiple modes, which can be set using the set_global_script_type function. In the default mode (i.e. mode 0) their execution is linked to the local map game loop, so the script will not run in dialogs or on the world map. In mode 1 their execution is linked to the player input, and so they will run whenever the mouse cursor is visible on screen, including the world map, character dialogs etc. In mode 2, execution is linked to the world map loop, so the script will only be executed on the world map and not on the local map or in any dialog windows. Mode 3 is a combination of modes 0 and 2, so scripts will be executed on both local maps and the world map, but not in dialog windows. Using mode 1 requires the input wrapper to be enabled. Use available_global_script_types to check what is available.",
    "url": "/sfall-documentation/global-scripts/",
    "relUrl": "/global-scripts/"
  },
  "15": {
    "id": "15",
    "title": "Global variables",
    "content": "Global variables These functions require an 8 characters long case sensitive string for the variable name. The variables behave the same as normal Fallout globals, except that they don’t have to be declared beforehand in vault13.gam. Trying to get a variable which hasn’t been set will always return 0. The functions are intended for use when a patch to a mod requires the addition of a new global variable, a case which would otherwise require the player to start a new game. get_sfall_global_float get_sfall_global_int set_sfall_global get_sfall_global_float float get_sfall_global_float(string/int varname) get_sfall_global_int int get_sfall_global_int(string/int varname) set_sfall_global void set_sfall_global(string/int varname, int/float value)",
    "url": "/sfall-documentation/global-variables/",
    "relUrl": "/global-variables/"
  },
  "16": {
    "id": "16",
    "title": "Graphics",
    "content": "Graphics The graphics functions are only available if the user is using graphics mode 4 or 5. Use graphics_funcs_available to check; it returns 1 if you can use them or 0 if you can’t. Calling graphics functions when graphics_funcs_available returns 0 will do nothing. activate_shader deactivate_shader force_graphics_refresh free_shader get_screen_height get_screen_width get_shader_texture get_shader_version graphics_funcs_available load_shader set_palette set_shader_float set_shader_int set_shader_mode set_shader_texture set_shader_vector activate_shader void activate_shader(int ID) deactivate_shader void deactivate_shader(int ID) force_graphics_refresh void force_graphics_refresh(bool enabled) Forces the screen to redraw at times when it normally wouldn’t. If you’re using animated shader, turning this option on is recommended. free_shader void free_shader(int ID) get_screen_height int get_screen_height() get_screen_width int get_screen_width() get_shader_texture int get_shader_texture(int ID, int texture) get_shader_version int get_shader_version Gives you the highest shader version supported by the player’s graphics cards. Possible return values are 11, 12, 13, 14, 20, 21 and 30. graphics_funcs_available bool graphics_funcs_available load_shader int load_shader(string path) Takes a path relative to the data shaders directory as an argument and returns a shader ID. That ID should be passed as the first argument to all other shader functions, and is valid until free_shader is called on the ID, the player loads a saved game or the player quits to the main menu. set_palette void set_palette(string path) set_shader_float void set_shader_float(int ID, string param, float value) set_shader_int void set_shader_int(int ID, string param, int value) set_shader_mode void set_shader_mode(int mode) Tells sfall when to use a shader. The parameter is a set of 32 flags which specify the screens on which the shader will be disabled, unless bit 32 is set, in which case the shader will only be active on those screens. Remember that screens are displayed on top of each other; if the player opens the character menu which in combat, the game still considers the player to be in combat. See sfall.h for a list of defines. set_shader_texture void set_shader_texture(int ID, string param, int texID) set_shader_vector void set_shader_vector(int ID, string param, float f1, float f2, float f3, float f4)",
    "url": "/sfall-documentation/graphics/",
    "relUrl": "/graphics/"
  },
  "17": {
    "id": "17",
    "title": "Hook functions",
    "content": "Hook functions get_sfall_arg get_sfall_args init_hook register_hook register_hook_proc set_sfall_arg set_sfall_return get_sfall_arg mixed get_sfall_arg() Gets the next argument from sfall. Each time it’s called it returns the next argument, or otherwise it returns 0 if there are no more arguments left. get_sfall_args int get_sfall_args() Returns all hook arguments as a new temp array. init_hook int init_hook() The hook script equivalent of game_loaded; it returns 2 when the script is first loaded, 1 when the player reloads and 0 otherwise. register_hook void register_hook(int hooktype) Used from a normal global script if you want to run it at the same point a full hook script would normally run. In case of this function, start proc will be executed in current global script. You can use all above functions like normal. register_hook_proc void register_hook_proc(int hooktype, proc procedure) The same as register_hook, except that you specifically define which procedure in the current script should be called as a hook (instead of start). Pass procedure the same as how you use dialog option functions (name without quotes). This IS the recommended way to use hook scripts, as it gives both modularity (each mod logic in a separate global script, no conflicts if you don’t use hs_*.int scripts) and flexibility (you can place all related hook scripts for specific mod in a single script!). Only use this in global scripts. Use zero (0) as second argument to unregister hook script from current global script. NOTE: you can hook several scripts to a single hook point, for example if it’s different mods from different authors or just some different aspects of one larger mod. In this case scripts are executed in reverse order of how they were registered. When one of the scripts in a chain returns value with set_sfall_return, the next script may override this value if calls set_sfall_return again. Sometimes you need to multiply certain value in a chain of hook scripts. Example: let’s say we have a Mod A which reduces all “to hit” chances by 50%. The code might look like this: original_chance = get_sfall_arg; set_sfall_return(original_chance / 2); Mod B also want to affect hit chances globally, by increasing them by 50%. Now in order for both mods to work well together, we need to add this line to Mod A hook script: set_sfall_arg(0, (original_chance / 2)); This basically changes hook argument for the next script. Mod B code: original_chance = get_sfall_arg; set_sfall_return(original_chance * 1.5); set_sfall_arg(0, (original_chance * 1.5)); So if you combine both mods together, they will run in chain and the end result will be a 75% from original hit chance (hook register order doesn’t matter in this case, if you use set_sfall_arg in both hooks). The defines to use for the hooktype are in sfall.h. set_sfall_arg void set_sfall_arg(int argnum, int value) Changes argument value. This is usefull if you have several hook scripts attached to one hook point (see register_hook_proc). set_sfall_return void set_sfall_return(int value) Used to return the new values from the script. Each time it’s called it sets the next value, or if you’ve already set all return values it does nothing.",
    "url": "/sfall-documentation/hook-functions/",
    "relUrl": "/hook-functions/"
  },
  "18": {
    "id": "18",
    "title": "Hook types",
    "content": "Hook types AdjustFID AfterHitRoll AmmoCost BarterPrice CalcAPCost CarTravel CombatDamage CombatTurn DeathAnim1 DeathAnim2 Deprecated hooks DescriptionObj ExplosiveTimer FindTarget GameModeChange InvenWield InventoryMove ItemDamage KeyPress MouseClick MoveCost OnDeath OnExplosion RemoveInvenObj RestTimer SetGlobalVar SetLighting Sneak Steal SubCombatDamage ToHit UseAnimObj UseObj UseObjOn UseSkill UseSkillOn WithinPerception AdjustFID HOOK_ADJUSTFID (hs_adjustfid.int) Runs after calculating character figure FID on the inventory screen, whenever the game decides that character appearance might change. Also happens on other screens, like barter. NOTE: FID has following format: 0x0ABBCDDD, where A is object type, BB - animation code (always 0 in this case), C - weapon code, DDD - FRM index in LST file. int arg1 - the vanilla fid calculated by the engine according to critter base FID and armor/weapon being used int ret1 - overrides the calculated FID with provided value AfterHitRoll HOOK_AFTERHITROLL (hs_afterhitroll.int) Runs after Fallout has decided if an attack will hit or miss. int arg1 - If the attack will hit. (0 - critical miss, 1 - miss, 2 - hit, 3 - critical hit) critter arg2 - The attacker critter arg3 - The target of the attack int arg4 - The bodypart int arg5 - The hit chance int ret1 - Override the hit/miss int ret2 - Override the targeted bodypart critter ret3 - Override the target of the attack AmmoCost HOOK_AMMOCOST (hs_ammocost.int) Runs when calculating ammo cost for a weapon. Doesn’t affect damage, only how much ammo is spent. By default, weapon will shoot when at least 1 round is left, regardless of ammo cost calculations. To add proper check for ammo before shooting and proper calculation of number of burst rounds (hook type 1 and 2 in arg4), set Misc.CheckWeaponAmmoCost=1 in ddraw.ini Item arg1 - weapon int arg2 - Number of bullets in burst (1 for single shots) int arg3 - Ammo cost calculated by original function (this is basically 2 for Super Cattle Prod and Mega Power Fist) int arg4 - Type of hook (0 - when subtracting ammo after single shot attack, 1 - when checking for &quot;out of ammo&quot; before attack, 2 - when calculating number of burst rounds, 3 - when subtracting ammo after burst attack) int ret1 - new ammo cost value (set to 0 for unlimited ammo) BarterPrice HOOK_BARTERPRICE (hs_barterprice.int) Runs whenever the value of goods being purchased is calculated. critter arg1 - the critter doing the bartering (either dude_obj or inven_dude) critter arg2 - the critter being bartered with int arg3 - the default value of the goods critter arg4 - table of requested goods (being bought from NPC) int arg5 - the amount of actual caps in the barter stack (as opposed to goods) int arg6 - the value of all goods being traded before skill modifications critter arg7 - table of offered goods (being sold to NPC) int arg8 - the total cost of the goods offered by the player int arg9 - set 1 if the &quot;offers&quot; button was pressed (not for a party member), otherwise 0 int ret1 - the modified value of all of the goods (pass -1 if you just want to modify offered goods) int ret2 - the modified value of all offered goods CalcAPCost HOOK_CALCAPCOST (hs_calcapcost.int) Runs whenever Fallout is calculating the AP cost of using the weapon (or unarmed attack). Doesn’t run for using other item types or moving. Note that the first time a game is loaded, this script doesn’t run before the initial interface is drawn, so if the script effects the AP cost of whatever is in the player’s hands at the time the wrong AP cost will be shown. It will be fixed the next time the interface is redrawn. You can get the weapon object by checking item slot based on attack type (ATKTYPE_LWEP1, ATKTYPE_LWEP2, etc) and then calling critter_inven_obj(). critter arg1 - The critter performing the action int arg2 - Attack Type (see ATKTYPE_* constants) int arg3 - Is aimed attack (1 or 0) int arg4 - The normal AP cost int ret1 - The new AP cost CarTravel HOOK_CARTRAVEL (hs_cartravel.int) Runs continuously during worldmap travel on car. int arg1 - vanilla car speed (between 3 and 8 &quot;steps&quot;) int arg2 - vanilla fuel consumption (100 and below) int ret1 - car speed override (pass -1 if you just want to override fuel consumption) int ret2 - fuel consumption override CombatDamage HOOK_COMBATDAMAGE (hs_subcombatdmg.int) Runs when: Game calculates how much damage each target will get. This includes primary target as well as all extras (explosions and bursts). This happens BEFORE the actual attack animation. AI decides whether it is safe to use area attack (burst, grenades), if he might hit friendlies. Does not run for misses, or non-combat damage like dynamite explosions. critter arg1 - The target critter arg2 - The attacker int arg3 - The amount of damage to the target int arg4 - The amount of damage to the attacker int arg5 - The special effect flags for the target (use bwand DAM_* to check specific flags) int arg6 - The special effect flags for the attacker (use bwand DAM_* to check specific flags) int arg7 - The weapon used in the attack int arg8 - The bodypart that was struck int arg9 - Damage Multiplier (this is divided by 2, so a value of 3 does 1.5x damage, and 8 does 4x damage. Usually it&#39;s 2; for critical hits, the value is taken from the critical table; with Silent Death perk and the corresponding attack conditions, the value will be doubled) int arg10 - Number of bullets actually hit the target (1 for melee attacks) int arg11 - The amount of knockback to the target int arg12 - Attack Type (see ATKTYPE_* constants) int ret1 - The damage to the target int ret2 - The damage to the attacker int ret3 - The special effect flags for the target int ret4 - The special effect flags for the attacker int ret5 - The amount of knockback to the target CombatTurn HOOK_COMBATTURN (hs_combatturn.int) Runs before and after each turn in combat (for both PC and NPC). int arg1 - event type: 1 - start of turn, 0 - normal end of turn, -1 - combat ended abruptly (by script or by pressing Enter during PC turn) int arg2 - critter doing the turn bool arg3 - set to 1 at the start of the player&#39;s turn after the game has been loaded, 0 otherwise int ret1 - pass 1 at the start of turn to skip the turn, pass -1 at the end of turn to force end of combat DeathAnim1 HOOK_DEATHANIM1 (hs_deathanim1.int) Runs before Fallout tries to calculate the death animation. Lets you switch out which weapon Fallout sees. int arg1 - The pid of the weapon performing the attack. (May be -1 if the attack is unarmed) critter arg2 - The attacker critter arg3 - The target int arg4 - The amount of damage int ret1 - The pid of an object to override the attacking weapon with DeathAnim2 HOOK_DEATHANIM2 (hs_deathanim2.int) Runs after Fallout has calculated the death animation. Lets you set your own custom frame id, so more powerful than hs_deathanim1, but performs no validation. When using critter_dmg function, this script will also run. In that case weapon pid will be -1 and target will point to an object with obj_art_fid == 0x20001F5. item arg1 - The pid of the weapon performing the attack. (May be -1 if the attack is unarmed) critter arg2 - The attacker critter arg3 - The target int arg4 - The amount of damage int arg5 - The death anim id calculated by Fallout int ret1 - The death anim id to override with Deprecated hooks hs_hexmoveblocking.int hs_hexaiblocking.int hs_hexshootblocking.int hs_hexsightblocking.int Run when checking to see if a hex blocks movement or shooting. (or ai-ing, presumably…) NOTE: these hook scripts can become very CPU-intensive and you should avoid using them. For this reason, they may be removed in future versions. If you want to check if some tile or path is blocked, use functions: obj_blocking_tile, obj_blocking_line, path_find_to. If you want script to be called every time NPC moves by hex in combat, use hs_movecost hook. Critter arg1 - the critter doing the moving int arg2 - the tile number being checked int arg3 - the elevation being checked int arg4 - 1 if the hex would normally be blocking object* ret1 - 0 if the hex doesn&#39;t block, or any sort of object pointer if it does DescriptionObj HOOK_DESCRIPTIONOBJ (hs_descriptionobj.int) Runs when using the examine action icon to display item description. You can override the description of the item. An example usage would be to add an additional description to the item based on player’s stats/skills. Obj arg1 - the item int ret1 - a pointer to the new text received by using &quot;get_string_pointer&quot; function ExplosiveTimer HOOK_EXPLOSIVETIMER (hs_explosivetimer.int) Runs after setting the explosive timer. You can override the result. int arg1 - the time in ticks set in the timer Obj arg2 - the explosive object int arg3 - the result of engine calculation of whether the timer was set successfully: 1 - failure, 2 - success (similar to ROLL_* in Condtion.h) int ret1 - overrides the time of the timer (maximum 18000 ticks) int ret2 - overrides the result of engine calculation: 0/1 - failure, 2/3 - success (similar to ROLL_*), any other value - use engine handler FindTarget HOOK_FINDTARGET (hs_findtarget.int) Runs when the ai is trying to pick a target in combat. Fallout first chooses a list of 4 likely suspects, then normally sorts them in order of weakness/distance/etc depending on the ai caps of the attacker. This hook replaces that sorting function, allowing you to sort the targets in some arbitrary way. Use sfall_return to give the 4 targets, in order of preference. If you want to specify less than 4 targets, fill in the extra spaces with 0’s. Pass -1 to skip the return value. The return values can include critters that weren’t in the list of possible targets, but the additional targets may still be discarded later on in the combat turn if they are out of the attackers perception or the chance of a successful hit is too low. The list of possible targets often includes duplicated entries. critter arg1 - The attacker critter arg2 - A possible target critter arg3 - A possible target critter arg4 - A possible target critter arg5 - A possible target critter ret1 - The first choice of target critter ret2 - The second choice of target critter ret3 - The third choice of target critter ret4 - The fourth choice of target GameModeChange HOOK_GAMEMODECHANGE (hs_gamemodechange.int) Runs once every time when the game mode was changed, like opening/closing the inventory, character screen, pipboy, etc. int arg1 - event type: 1 - when the player exits the game, 0 - otherwise InvenWield HOOK_INVENWIELD (hs_invenwield.int) Runs before wielding or unwielding an armor or a weapon by a critter (except when using inventory by PC). An example usage would be to change critter art depending on armor being used or to dynamically customize weapon animations. NOTE: when replacing a previously wielded armor or weapon, the unwielding hook will not be executed. If you need to rely on this, try checking if armor/weapon is already equipped when wielding hook is executed. Critter arg1 - critter Obj arg2 - item being wielded or unwielded (weapon/armor) int arg3 - slot (INVEN_TYPE_*) int arg4 - 1 when wielding, 0 when unwielding int ret1 - overrides hard-coded handler (-1 - use engine handler, any other value - override) - NOT RECOMMENDED InventoryMove HOOK_INVENTORYMOVE (hs_inventorymove.int) Runs before moving items between inventory slots in dude interface. You can override the action. What you can NOT do with this hook: force moving items to inappropriate slots (like gun in armor slot) What you can do: restrict player from using specific weapons or armors add AP costs for all inventory movement including reloading apply or remove some special scripted effects depending on PC’s armor int arg1 - Target slot (0 - main backpack, 1 - left hand, 2 - right hand, 3 - armor slot, 4 - weapon, when reloading it by dropping ammo, 5 - container, like bag/backpack, 6 - dropping on the ground, 7 - picking up item, 8 - dropping item on the character portrait) Item arg2 - Item being moved Item arg3 - Item being replaced, weapon being reloaded, or container being filled (can be 0) int ret1 - Override setting (-1 - use engine handler, any other value - prevent relocation of item/reloading weapon/picking up item) ItemDamage HOOK_ITEMDAMAGE (hs_itemdamage.int) Runs when retrieving the damage rating of the player’s used weapon. (Which may be their fists.) int arg1 - The default min damage int arg2 - The default max damage Item arg3 - The weapon used. (0 if unarmed) Critter arg4 - The critter doing the attacking int arg5 - The type of attack int arg6 - non-zero if this is an attack using a melee weapon int ret1 - Either the damage to be used, if ret2 isn&#39;t given, or the new minimum damage if it is int ret2 - The new maximum damage KeyPress HOOK_KEYPRESS (hs_keypress.int) Runs once every time when any key was pressed or released. DX codes: (see dik.h header) VK codes NOTE: if you want to override a key, the new key DX scancode should be the same for both pressed and released events. int arg1 - event type: 1 - pressed, 0 - released int arg2 - key DX scancode int arg3 - key VK code (very similar to ASCII codes) int ret1 - overrides the pressed key (a new key DX scancode or 0 for no override) MouseClick HOOK_MOUSECLICK (hs_mouseclick.int) Runs once every time when a mouse button was pressed or release. int arg1 - event type: 1 - pressed, 0 - released int arg2 - button number (0 - left, 1 - right, up to 7) MoveCost HOOK_MOVECOST (hs_movecost.int) Runs when calculating the AP cost of movement Critter arg1 - the critter doing the moving int arg2 - the number of hexes being moved int arg3 - the original AP cost int ret1 - the new AP cost OnDeath HOOK_ONDEATH (hs_ondeath.int) Runs immediately after a critter dies for any reason. No return values; this is just a convenience for when you need to do something after death for a large number of different critters and don’t want to have to script each and every one of them. Critter arg1 - The critter that just died OnExplosion HOOK_ONEXPLOSION (hs_onexplosion.int) Runs when Fallout is checking all the tiles within the explosion radius for targets before an explosion occurs. The tile checking will be interrupted when 6 additional targets (critters) are received. int arg1 - event type: 1 - when checking objects within the explosion radius without causing damage (e.g. the player drops an active explosive), 0 - otherwise Critter arg2 - The attacker int arg3 - The tile on which the explosion occurs int arg4 - checked tile within the explosion radius Obj arg5 - first found object on the checked tile as an additional target Critter arg6 - The target critter, may be 0 or equal to the attacker int arg7 - 1 when using throwing weapons (e.g. grenades), 0 otherwise int ret1 - overrides the found object on the checked tile, pass 0 to skip the object RemoveInvenObj HOOK_REMOVEINVENOBJ (hs_removeinvenobj.int) Runs when an object is removed from a container or critter’s inventory for any reason. Obj arg1 - the owner that the object is being removed from item arg2 - the item that is being removed int arg3 - the number of items to remove int arg4 - The reason the object is being removed (see RMOBJ_* constants) Obj arg5 - The destination object when the item is moved to another object, otherwise 0 RestTimer HOOK_RESTTIMER (hs_resttimer.int) Runs continuously while the player is resting (using pipboy alarm clock). int arg1 - the game time in ticks int arg2 - event type: 1 - when the resting ends normally, -1 - when pressing ESC to cancel the timer, 0 - otherwise int arg3 - the hour part of the length of resting time int arg4 - the minute part of the length of resting time int ret1 - pass 1 to interrupt the resting, pass 0 to continue the rest if it was interrupted by pressing ESC key SetGlobalVar HOOK_SETGLOBALVAR (hs_setglobalvar.int) Runs when setting the value of a global variable. int arg1 - the index number of the global variable being set int arg2 - the set value of the global variable int ret1 - overrides the value of the global variable SetLighting HOOK_SETLIGHTING (hs_setlighting.int) Runs before setting the light level for an object or a map. You can override the result. Obj arg1 - the object being set, or -1 when setting the light level for a map int arg2 - the light intensity int arg3 - the light radius, or -1 when setting the light level for a map int ret1 - overrides the light intensity. Intensity range is from 0 to 65536 int ret2 - overrides the light radius. Radius range is from 0 to 8 (works only for the object) Sneak HOOK_SNEAK (hs_sneak.int) Runs when the Sneak skill is activated, or when the game rolls another Sneak check after the duration for the current one is over. You can override the result of a random Sneak check or the duration time for the current result. int arg1 - Sneak check result: 1 - success, 0 - failure int arg2 - the duration in ticks for the current Sneak check (time depends on Sneak skill level) Critter arg3 - the critter (usually dude_obj) int ret1 - overrides the result of the Sneak check int ret2 - overrides the duration time for the current result Steal HOOK_STEAL (hs_steal.int) Runs when checking an attempt to steal or plant an item in other inventory using Steal skill. This is fired before the default handlers are called, which you can override. In this case you MUST provide message of the result to player (“You steal the %s”, “You are caught planting the %s”, etc.). Example message (vanilla behavior): display_msg(sprintf(mstr_skill(570 + (isSuccess != false) + arg4*2), obj_name(arg3))); Critter arg1 - Thief Obj arg2 - The target Item arg3 - Item being stolen/planted int arg4 - 0 when stealing, 1 when planting int ret1 - overrides hard-coded handler (1 - force success, 0 - force fail, -1 - use engine handler) SubCombatDamage HOOK_SUBCOMBATDAMAGE (hs_subcombatdamage.int) This hook overrides the vanilla damage calculation formula. Runs when: Before the game calculates how much damage each target will get. This includes primary target as well as all extras (explosions and bursts). AI decides whether it is safe to use area attack (burst, grenades), if he might hit friendlies. Does not run for misses, non-combat damage like dynamite explosions, or if one of the damage formulas is selected in ddraw.ini. Critter arg1 - The attacker Critter arg2 - The target Obj arg3 - The weapon used in the attack int arg4 - Attack Type (see ATKTYPE_* constants) int arg5 - Number of bullets actually hit the target (1 for melee attacks) int arg6 - Target&#39;s Damage Resistance (DR) value (affected by critical hit effects, perks, traits, and special unarmed attacks) int arg7 - Target&#39;s Damage Threshold (DT) value (affected by critical hit effects, perks, traits, and special unarmed attacks) int arg8 - Bonus ranged damage from the perk int arg9 - Damage Multiplier (this is divided by 2, so a value of 3 does 1.5x damage, and 8 does 4x damage. Usually it&#39;s 2; for critical hits, the value is taken from the critical table; with Silent Death perk and the corresponding attack conditions, the value will be doubled) int arg10 - Combat Difficulty multiplier (125 - rough, 100 - normal, 75 - wimpy; for player or party members it&#39;s always 100) int arg11 - The calculated amount of damage (usually 0, required when using multiple hook scripts to calculate damage and using the set_sfall_arg function) mixed arg12 - Computed attack results (see C_ATTACK_* for offsets and use get/set_object_data functions to get/set the data) int ret1 - The returned amount of damage ToHit HOOK_TOHIT (hs_tohit.int) Runs when Fallout is calculating the chances of an attack striking a target. Runs after the hit chance is fully calculated normally, including applying the 95% cap. int arg1 - The unmodified hit chance critter arg2 - The attacker critter arg3 - The target of the attack int arg4 - The targeted bodypart int arg5 - Source tile (may differ from attacker&#39;s tile, when AI is considering potential fire position) int arg6 - Attack Type (one of ATKTYPE_*) int arg7 - Ranged flag (0 or 1, actually passed 1 even for unarmed attacks, may be a vanilla bug) int ret1 - the new hit chance UseAnimObj HOOK_USEANIMOBJ (hs_useanimobj.int) Runs before playing the “use” (usually “magic hands”) animation when a critter uses a scenery/container object on the map, or before walking/running animation if the player is at a distance from the object. Critter arg1 - the critter that uses an object (usually dude_obj) Obj arg2 - the object being used int arg3 - the animation code being used (see ANIM_* in Animcomd.h) int ret1 - overrides the animation code (pass -1 if you want to skip the animation) UseObj HOOK_USEOBJ (hs_useobj.int) Runs when: a critter uses an object from inventory which have “Use” action flag set or it’s an active flare or dynamite. player uses an object from main interface This is fired before the object is used, and the relevant use_obj script procedures are run. You can disable default item behavior. NOTE: you can’t remove and/or destroy this object during the hookscript (game will crash otherwise). To remove it, return 1. Critter arg1 - The user int arg2 - The object used int ret1 - overrides hard-coded handler and selects what should happen with the item (0 - place it back, 1 - remove it, -1 - use engine handler) UseObjOn HOOK_USEOBJON (hs_useobjon.int) Runs when: a critter uses an object on another critter. (Or themselves) a critter uses an object from inventory screen AND this object does not have “Use” action flag set and it’s not active flare or explosive. player or AI uses any drug This is fired before the object is used, and the relevant use_obj_on script procedures are run. You can disable default item behavior. NOTE: you can’t remove and/or destroy this object during the hookscript (game will crash otherwise). To remove it, return 1. Critter arg1 - The target Critter arg2 - The user int arg3 - The object used int ret1 - overrides hard-coded handler and selects what should happen with the item (0 - place it back, 1 - remove it, -1 - use engine handler) UseSkill HOOK_USESKILL (hs_useskill.int) Runs when using any skill on any object. This is fired before the default handlers are called, which you can override. In this case you should write your own skill use handler entirely, or otherwise nothing will happen (this includes fade in/fade out, time lapsing and messages - all of this can be scripted; to get vanilla text messages - use message_str_game() along with sprintf()). Suggested use - override first aid/doctor skills to buff/nerf them, override steal skill to disallow observing NPCs inventories in some cases. Doesn’t seem to run when lock picking. Critter arg1 - The user critter Obj arg2 - The target object int arg3 - skill being used int arg4 - skill bonus from items such as first aid kits int ret1 - overrides hard-coded handler (-1 - use engine handler, any other value - override) UseSkillOn HOOK_USESKILLON (hs_useskillon.int) Runs before using any skill on any object. Lets you override the critter that uses the skill. NOTE: the user critter can’t be overridden when using Steal skill. Critter arg1 - The user critter (usually dude_obj) Obj arg2 - The target object/critter int arg3 - skill being used int ret1 - a new critter to override the user critter. Pass -1 to cancel the skill use, pass 0 to skip this return value int ret2 - pass 1 to allow the skill being used in combat (only for dude_obj or critter being controlled by the player) WithinPerception HOOK_WITHINPERCEPTION (hs_withinperception.int) Runs when checking if one critter sees another critter. This is used in different situations like combat AI. You can override the result. NOTE: obj_can_see_obj calls this first when deciding if critter can possibly see another critter with regard to perception, lighting, sneak factors. If check fails, the end result is false. If check succeeds (e.g. critter is within perception range), another check is made if there is any blocking tile between two critters (which includes stuff like windows, large bushes, barrels, etc.) and if there is - check still fails. You can override “within perception” check by returning 0 or 1, OR, as a convenience, you can also override blocking check after the perception check by returning 2 instead. In this case you should add “line of sight” check inside your hook script, otherwise critters will detect you through walls. This is fired after the default calculation is made. Critter arg1 - Watcher object Obj arg2 - Target object int arg3 - Result of vanilla function: 1 - within perception range, 0 - otherwise int arg4 - Type of hook: 1 - when being called from obj_can_see_obj script function, 2 when being called from obj_can_hear_obj script function (need to set ObjCanHearObjFix=1 in ddraw.ini), 0 for all other cases int ret1 - overrides the returned result of the function: 0 - not in range (can&#39;t see), 1 - in range (will see if not blocked), 2 - forced detection (will see regardless, only used in obj_can_see_obj scripting function which is called by every critter in the game)",
    "url": "/sfall-documentation/hook-types/",
    "relUrl": "/hook-types/"
  },
  "19": {
    "id": "19",
    "title": "Hooks",
    "content": "Hooks Hook scripts are specially named scripts that are run by sfall at specific points to allow mods to override normally hardcoded behaviour in a more flexible way than sfall’s normal ini configuration. In addition to the bit of code it overrides, the script will be run once when first loaded and again at each player reload to allow for setup. Hook scripts have access to a set of arguments supplied to sfall, but aren’t required to use them all. They also return one or more values, but again they’re optional, and you only need to return a value if you want to override the default. See hook types and hook functions reference for details. Hooks compatibility To aid in mods compatibility, avoid using hs_xxx .int scripts. Instead it is recommended to use a normal global script combined with register_hook_proc or register_hook. Example setup for a hook-script based mod: procedure tohit_hook_handler begin display_msg(&quot;Modifying hit_hook &quot; + get_sfall_arg); set_hit_chance_max(100); set_sfall_return(100); end procedure start begin if game_loaded then begin register_hook_proc(HOOK_TOHIT, tohit_hook_handler); end end",
    "url": "/sfall-documentation/hooks/",
    "relUrl": "/hooks/"
  },
  "20": {
    "id": "20",
    "title": "Home",
    "content": "sfall Getting started Questions and problems sfall is a set of engine modifications for the classic game Fallout 2 in form of a DLL, which modifies executable in memory without changing anything in EXE file itself. Engine modifications include: Better support for modern operating systems Externalizing many settings like starting map and game time, skills, perks, critical hit tables, books, etc. Bug fixes Many additional features for users, such as item highlight button, party member control, etc. Extended scripting capabilities for modders (many new opcodes to control sfall features as well as previously unavailable vanilla engine functions) Getting started This is documentation for sfall specifically, not Fallout scripting in general. For vanilla function reference, refer to the wiki. To get started with sfall, first familiarize yourself with new concepts: Global scripts Global variables Arrays Hooks Data types Lists Pay special attention to the best practices page. Next, proceed to discover new functions. They are categorized, use the menu to find the one you need. If you can’t, also check uncategorized functions list and sfall macros. Questions and problems Report bugs and suggest features on Github. Ask questions and discuss on the forum.",
    "url": "/sfall-documentation/",
    "relUrl": "/"
  },
  "21": {
    "id": "21",
    "title": "Interface",
    "content": "Interface These functions relate to the boxes that appear above the interface such as SNEAK and LEVEL. You can use 3 for LEVEL and 4 for ADDICT, or the range from 5 to (4 + the value of BoxBarCount in ddraw.ini) for custom boxes. Remember to add your messages to intrface.msg and set up the font colours in ddraw.ini if you’re going to use custom boxes. create_message_window get_viewport_x get_viewport_y get_window_under_mouse hide_iface_tag is_iface_tag_active set_pipboy_available set_viewport_x set_viewport_y show_iface_tag create_message_window void create_message_window(string message) get_viewport_x int get_viewport_x() get_viewport_y int get_viewport_y() get_window_under_mouse int get_window_under_mouse() hide_iface_tag void hide_iface_tag(int tag) is_iface_tag_active int is_iface_tag_active(int tag) Starting from sfall 4.1, can also be used to check 0 for SNEAK, 1 for POISONED, and 2 for RADIATED. set_pipboy_available void set_pipboy_available(int available) Will only accept 0 or 1 as an argument. Using any other value will cause the function to have no effect. Use 0 to disable the pipboy, and 1 to enable it. set_viewport_x void set_viewport_x(int view_x) set_viewport_y void set_viewport_y(int view_y) show_iface_tag void show_iface_tag(int tag)",
    "url": "/sfall-documentation/interface/",
    "relUrl": "/interface/"
  },
  "22": {
    "id": "22",
    "title": "Inventory",
    "content": "Inventory active_hand get_critter_current_ap obj_is_carrying_obj set_critter_current_ap set_inven_ap_cost toggle_active_hand active_hand int active_hand get_critter_current_ap int get_critter_current_ap(CritterPtr) Should only be used during the target critters turn while in combat. Calling it outside of combat typically returns the critters max ap, but don’t rely on that behaviour. (Specifically, if the critter has never before entered combat, it will probably return the critters base ap ignoring any extra bonuses from perks etc.) obj_is_carrying_obj int (ObjectPtr invenObj, ObjectPtr itemObj) Returns number of itemObj inside invenObj’s inventory, note that both arguments are object pointers. useful when dealing with different stacks of same item (obj_is_carrying_obj_pid just returns total for all stacks of the same PID.) set_critter_current_ap void set_critter_current_ap(CritterPtr, int ap) Should only be used during the target critters turn while in combat. Using it on the player will not automatically redraw the screen, so the ap bar will be incorrect until the player next clicks. set_inven_ap_cost void set_inven_ap_cost toggle_active_hand void toggle_active_hand",
    "url": "/sfall-documentation/inventory/",
    "relUrl": "/inventory/"
  },
  "23": {
    "id": "23",
    "title": "Keyboard and Mouse",
    "content": "Keyboard and Mouse get_mouse_buttons get_mouse_x get_mouse_y key_pressed tap_key get_mouse_buttons int get_mouse_buttons() Returns the number of the mouse button that is currently pressed (1 - left, 2 - right, 3 - left+right, 4 - middle, 0 otherwise). get_mouse_x int get_mouse_x() get_mouse_y int get_mouse_y() key_pressed int key_pressed(int dxScancode) tap_key void tap_key(int dxScancode)",
    "url": "/sfall-documentation/keyboard-and-mouse/",
    "relUrl": "/keyboard-and-mouse/"
  },
  "24": {
    "id": "24",
    "title": "Knockback",
    "content": "Knockback The type value in the weapon knockback functions can be 0 or 1. If 0, the value becomes an absolute distance that targets will be knocked back. If 1, the value is multiplied by the distance they would normally have been knocked back. Weapon knockback modifiers are applied in the order weapon -&gt; attacker -&gt; target, so a x2 weapon wielded by an abs 6 attacker hitting a /2 target will knock the target back 3 squares. The knockback functions will not override the stonewall perk or knockdowns resulting from criticals. knockback values set on weapons or critters are not saved, and must be reset each time the player reloads. remove_attacker_knockback remove_target_knockback remove_weapon_knockback set_attacker_knockback set_target_knockback set_weapon_knockback remove_attacker_knockback void remove_attacker_knockback(CritterPtr) remove_target_knockback void remove_target_knockback(CritterPtr) remove_weapon_knockback void remove_weapon_knockback(WeaponPtr) set_attacker_knockback void set_attacker_knockback(CritterPtr, int type, float value) set_target_knockback void set_target_knockback(CritterPtr, int type, float value) set_weapon_knockback void set_weapon_knockback(WeaponPtr, int type, float value)",
    "url": "/sfall-documentation/knockback/",
    "relUrl": "/knockback/"
  },
  "25": {
    "id": "25",
    "title": "List functions",
    "content": "List functions The list_xxx functions can be used to loop over all items on a map. list_begin takes an argument telling sfall what you want to list. (Defined in sfall.h) It returns a list pointer, which you iterate through with list_next. Finally, when you’ve finished with the list use list_end on it. Not calling list_end will result in a memory leak. Alternatively, use list_as_array to get the whole list at once as a temp array variable, which can be looped over using len_array and which you don’t need to remember to free afterwards. list_as_array list_begin list_end list_next list_as_array array list_as_array(int type) list_begin int list_begin(int type) list_end void list_end(int listid) list_next int list_next(int listid)",
    "url": "/sfall-documentation/list-functions/",
    "relUrl": "/list-functions/"
  },
  "26": {
    "id": "26",
    "title": "Maps and Encounters",
    "content": "Maps and Encounters force_encounter force_encounter_with_flags get_light_level in_world_map set_car_current_town set_map_time_multi force_encounter void force_encounter(int map) Can be called either from a global script while traveling on the world map, or from a normal script while on a local map. In either case the encounter occurs shortly after the next time the player moves on the world map. The player will not get an outdoorsman skill check. force_encounter_with_flags void force_encounter_with_flags(int map, int flags) Does the same thing as force_encounter, but allows the specification of some extra options. Forcing a random encounter on a map that is not normally used for random encounters may cause the player to lose the car, if they have it. In this case use force_encounter_with_flags with the ENCOUNTER_FLAG_NO_CAR flag set. get_light_level int get_light_level() Returns ambient light level in range 0..65536. The value returned by get_light_level may not exactly match that set by set_light_level, as set_light_level applies modifiers from the Night Vision perk. in_world_map bool in_world_map Returns 1 if the player is looking at the world map, or 0 at any other time. Obviously this is only useful in global scripts, since normal scripts will never get the chance to run on the world map. set_car_current_town void set_car_current_town(int town) Changes the current town index for the player’s car. set_map_time_multi void set_map_time_multi(float multi) Adjusts how fast time passes while you’re on the world map. It takes a single float as an argument, where 1 is the normal speed. This function works in addition to the WorldMapTimeMod setting in ddraw.ini and the Pathfinder perk, rather than overriding it, so calling set_map_time_multi(0.5) when the player has 2 levels of Pathfinder would result in time passing at 25% the normal speed on the world map.",
    "url": "/sfall-documentation/maps-and-encounters/",
    "relUrl": "/maps-and-encounters/"
  },
  "27": {
    "id": "27",
    "title": "Math",
    "content": "Math ^ (operator) abs arctan ceil cos exponent floor2 log round sin sqrt tan ^ (operator) x ^ y Exponentiation. Use as any other arithmetic operator, like 5^(1/3). If exponent is integer, you can use negative base, otherwise you will get “nan” with negative base. If both arguments are integers, result will be integer. abs int/float abs(int/float x) Absolute (positive) value of x. arctan float arctan(float x, float y) Arctangent of x. Pass 1 as y (don’t ask…). ceil int ceil(float) Round x to the nearest integer that is not less than x. cos float cos(float x) Cosine of x exponent float exponent(float x) e ^ x floor2 MACRO int floor2(int/float value) Works just like vanilla floor function, but returns correct integers for negative values (vanilla floor function works exactly the same as ceil for negative values, much like trunc in C/C++). Macro from: int sfall_func1(&quot;floor2&quot;, int/float value) log float log(float x) Natural logarithm of x. round int round(float x) Round x to the nearest integer. sin float sin(float x) Sine of x sqrt float sqrt(float x) Square root of x. tan float tan(float x) Tangent of x",
    "url": "/sfall-documentation/math/",
    "relUrl": "/math/"
  },
  "28": {
    "id": "28",
    "title": "Misc finctions",
    "content": "Misc finctions apply_heaveho_fix hero_select_win input_funcs_available nb_create_char resume_game set_df_model set_dm_model set_hero_race set_hero_style sfall_ver_build sfall_ver_major sfall_ver_minor stop_game apply_heaveho_fix void apply_heaveho_fix hero_select_win void hero_select_win(int) input_funcs_available int input_funcs_available() The input functions are only available if the user has the input hook turned on in ddraw.ini. Use input_funcs_available to check. nb_create_char int nb_create_char() nb_* functions are reserved for the brotherhood tactical training mod, and should be avoided. resume_game void resume_game() set_df_model void set_df_model(string name) set_dm_model void set_dm_model(string name) set_hero_race void set_hero_race(int style) set_hero_style void set_hero_style(int style) sfall_ver_build int sfall_ver_build() sfall_ver_major int sfall_ver_major() sfall_ver_minor int sfall_ver_minor() stop_game void stop_game()",
    "url": "/sfall-documentation/misc-finctions/",
    "relUrl": "/misc-finctions/"
  },
  "29": {
    "id": "29",
    "title": "Modificators",
    "content": "Modificators gdialog_get_barter_mod get_unspent_ap_bonus get_unspent_ap_perk_bonus set_base_pickpocket_mod set_critter_pickpocket_mod set_hp_per_level_mod set_pickpocket_max set_pyromaniac_mod set_swiftlearner_mod set_unspent_ap_bonus set_unspent_ap_perk_bonus set_xp_mod gdialog_get_barter_mod int gdialog_get_barter_mod() get_unspent_ap_bonus int get_unspent_ap_bonus() Gets the AC bonus you receive per unused action point at the end of your turn in combat. To allow for fractional values, the value given if divided by 4. (Hence the default value is 4 and not 1.) get_unspent_ap_perk_bonus int get_unspent_ap_perk_bonus() Similar to get_unspent_ap_bonus, but accounts for the extra AC granted by the h2h evade perk. (The default value of this is also 4, equivalent to doubling the original bonus. set_base_pickpocket_mod void set_base_pickpocket_mod(int max, int mod) Changes maximum chance of success and chance mod for each steal attempt. max will replace 95% success chance cap (so you can set 100% maximum chance, for instance). mod will add this much percent to each success chance. for example if your chance is 50% and mod is 20, you will get 70% actual success rate set_critter_pickpocket_mod void set_critter_pickpocket_mod(CritterPtr, int max, int mod) The same as set_base_pickpocket, but applies only to specific critter. set_hp_per_level_mod void set_hp_per_level_mod(int mod) set_pickpocket_max void set_pickpocket_max(int percentage) Effects all critters rather than just the player. set_pyromaniac_mod void set_pyromaniac_mod(int bonus) set_swiftlearner_mod void set_swiftlearner_mod(int bonus) set_unspent_ap_bonus void set_unspent_ap_bonus(int multiplier) Alter the AC bonus you receive per unused action point at the end of your turn in combat. To allow for fractional values, the value given if divided by 4. (Hence the default value is 4 and not 1.) set_unspent_ap_perk_bonus void set_unspent_ap_perk_bonus(int multiplier) Similar to set_unspent_ap_bonus, but effects the extra AC granted by the h2h evade perk. (The default value of this is also 4, equivalent to doubling the original bonus. set_xp_mod void set_xp_mod(int percentage)",
    "url": "/sfall-documentation/modificators/",
    "relUrl": "/modificators/"
  },
  "30": {
    "id": "30",
    "title": "NPC perks",
    "content": "NPC perks These functions are similar to has_fake_perk/trait, set_fake_perk/trait, set_selectable_perk functions, but apply to the specified party member NPC (including dude_obj) has_fake_perk_npc has_fake_trait_npc set_fake_perk_npc set_fake_trait_npc set_selectable_perk_npc has_fake_perk_npc int has_fake_perk_npc(object npc, string namePerk) has_fake_trait_npc int has_fake_trait_npc(object npc, string nameTrait) set_fake_perk_npc void set_fake_perk_npc(object npc, string namePerk, int level, int image, string desc) set_fake_trait_npc void set_fake_trait_npc(object npc, string nameTrait, int active, int image, string desc) set_selectable_perk_npc void set_selectable_perk_npc(object npc, string namePerk, int active, int image, string desc)",
    "url": "/sfall-documentation/npc-perks/",
    "relUrl": "/npc-perks/"
  },
  "31": {
    "id": "31",
    "title": "Objects and Prototypes",
    "content": "Objects and Prototypes create_spatial get_npc_level get_proto_data get_script inc_npc_level party_member_list remove_script set_proto_data set_script create_spatial ObjectPtr create_spatial(int scriptID, int tile, int elevation, int radius) Creates new spatial script with given SID, at given tile, and radius. get_npc_level int get_npc_level(string npc) get_proto_data int get_proto_data(int pid, int offset) Used to read the in-memory copies of the .pro files Fallout makes when they are loaded. The offset refers to the offset in memory from the start of the proto to the element you are reading. get_script int get_script(ObjPtr) Accepts a pointer to an object and returns its scriptID (line number in scripts.lst), or -1 if the object is unscripted. inc_npc_level void inc_npc_level(string npc) Takes a party member PID or an NPC name (deprecated, for compatibility with sfall 4.1.5/3.8.15 or earlier) as an argument. The NPC must be in your party. This function ignores player level requirements and the minimum 3 player level delay between NPC level gains. It also ignores the random element, regardless of sfall’s NPCAutoLevel setting. party_member_list array party_member_list(int includeHidden) Returns array of all current party members. 0 - only critter-type, alive and visible will be returned, 1 - all object, including Trunk, etc. remove_script void remove_script(ObjPtr) Accepts a pointer to an object and will remove the script from that object. set_proto_data void set_proto_data(int pid, int offset, int value) Used to alter the in-memory copies of the .pro files Fallout makes when they are loaded. The offset refers to the offset in memory from the start of the proto to the element you are reading. Changes are not stored on disc, and are not permanent. If you modify the protos, and then Fallout subsequently reloads the file your changes will be lost. set_script void set_script(ObjPtr, int scriptid) Accepts a pointer to an object and scriptID, and applies the given script to an object (scriptID accept the same values as create_object_sid from sfall 3.6). If used on an object that is already scripted, it will remove the existing script first; you cannot have multiple scripts attached to a single object. Calling set_script on self_obj will have all sorts of wacky side effects, and should be avoided. If you add 0x80000000 to the sid when calling set_script, map_enter_p_proc will be SKIPPED. The start proc will always be run.",
    "url": "/sfall-documentation/objects-and-prototypes/",
    "relUrl": "/objects-and-prototypes/"
  },
  "32": {
    "id": "32",
    "title": "Pathway",
    "content": "Pathway obj_blocking_line path_find_to obj_blocking_line ObjectPtr obj_blocking_line(ObjectPtr objFrom, int tileTo, int blockingType) Returns first object which blocks direct linear path from objFrom to tileTo using selected blocking function (see BLOCKING_TYPE_* constants in sfall.h). If path is clear (no blocker was encountered by selected function) - returns 0. objFrom is always excluded from calculations, but is required to be a valid object. path_find_to array path_find_to(ObjectPtr objFrom, int tileTo, int blockingType) Returns the shortest path to a given tile using given blocking function as an array of tile directions (0..5) to move on each step. Array length equals to a number of steps. Empty array means that specified target cannot be reached.",
    "url": "/sfall-documentation/pathway/",
    "relUrl": "/pathway/"
  },
  "33": {
    "id": "33",
    "title": "Perks and Traits",
    "content": "Perks and Traits clear_selectable_perks get_perk_available get_perk_owed has_fake_perk has_fake_trait hide_real_perks perk_add_mode remove_trait set_fake_perk set_fake_trait set_perk_agl set_perk_chr set_perk_desc set_perk_end set_perk_freq set_perk_freq set_perk_image set_perk_int set_perk_lck set_perk_level set_perk_level_mod set_perk_name set_perk_owed set_perk_per set_perk_ranks set_perk_skill1 set_perk_skill1_mag set_perk_skill2 set_perk_skill2_mag set_perk_stat set_perk_stat_mag set_perk_str set_perk_type set_perkbox_title set_selectable_perk show_real_perks clear_selectable_perks void clear_selectable_perks() Restores the “select a perk” box to its default state. get_perk_available int get_perk_available(int perk) get_perk_owed int get_perk_owed has_fake_perk int has_fake_perk(string name) Returns the number of levels the player has of the perks with the given name or ID of extra perk. has_fake_trait int has_fake_trait(string name) Returns the number of levels the player has of the traits with the given name or ID of extra trait. hide_real_perks void hide_real_perks() Prevent the “select a perk” box from displaying any of the original 119 perks. perk_add_mode void perk_add_mode(int type) Modifies what happens when a fake perk is selected from the perks dialog. It is treated as a set of flags - if bit 1 is set then it is added to the player’s traits, if bit 2 is set it is added to the player’s perks, and if bit 3 is set it is removed from the list of selectable perks. The default is 0x2. remove_trait void remove_trait(int traitID) set_fake_perk void set_fake_perk(string name, int level, int image, string desc) Used to add additional traits and perks to the character screen. They will be saved correctly when the player saves and reloads games, but by themselves they will have no further effect on the character. For perks, the allowed range for levels is between 0 and 100; setting the level to 0 removes that perk. For traits, the level must be 0 or 1. The image is a numeric id that corresponds to an entry in skilldex.lst. The name is limited to 63 characters and the description to 255 characters by sfall, but internal Fallout limits may be lower. set_fake_trait void set_fake_trait(string name, int active, int image, string desc) Used to add additional traits and perks to the character screen. They will be saved correctly when the player saves and reloads games, but by themselves they will have no further effect on the character. For perks, the allowed range for levels is between 0 and 100; setting the level to 0 removes that perk. For traits, the level must be 0 or 1. The image is a numeric id that corresponds to an entry in skilldex.lst. The name is limited to 63 characters and the description to 255 characters by sfall, but internal Fallout limits may be lower. set_perk_agl void set_perk_agl(int perkID, int value) set_perk_chr void set_perk_chr(int perkID, int value) set_perk_desc void set_perk_desc(int perkID, string value) set_perk_end void set_perk_end(int perkID, int value) set_perk_freq void set_perk_freq(int value) Sets the number of levels between each perk. Setting to 0 will reset it back to the default. This overrides the effects of the skilled trait. Not saved into the save game, so needs to be called once per reload. Be careful not to let the player obtain a perk when no perks are available to pick, or the game may crash. set_perk_freq void set_perk_freq(int value) Sets the number of levels between each perk. set_perk_image void set_perk_image(int perkID, int value) set_perk_int void set_perk_int(int perkID, int value) set_perk_lck void set_perk_lck(int perkID, int value) set_perk_level void set_perk_level(int perkID, int value) set_perk_level_mod void set_perk_level_mod(int levels) Sets a modifier between +25 and -25 that is added/subtracted from the player’s level for the purposes of deciding which perks can be chosen. set_perk_name void set_perk_name(int perkID, string value) set_perk_owed void set_perk_owed(int value) set_perk_per void set_perk_per(int perkID, int value) set_perk_ranks void set_perk_ranks(int perkID, int value) set_perk_skill1 void set_perk_skill1(int perkID, int value) set_perk_skill1_mag void set_perk_skill1_mag(int perkID, int value) set_perk_skill2 void set_perk_skill2(int perkID, int value) set_perk_skill2_mag void set_perk_skill2_mag(int perkID, int value) set_perk_stat void set_perk_stat(int perkID, int value) set_perk_stat_mag void set_perk_stat_mag(int perkID, int value) set_perk_str void set_perk_str(int perkID, int value) set_perk_type void set_perk_type(int perkID, int value) set_perkbox_title void set_perkbox_title(string title) Used to change the title of the “select a perk” box, or by using “” it will be set back to the default. set_selectable_perk void set_selectable_perk(string name, int active, int image, string desc) Used to add additional items to “select a perk” box by setting the ‘active’ parameter to 1, and to remove them again by setting it to 0. show_real_perks void show_real_perks() Reverts the effect os hide_real_perks.",
    "url": "/sfall-documentation/perks-and-traits/",
    "relUrl": "/perks-and-traits/"
  },
  "34": {
    "id": "34",
    "title": "Position on map",
    "content": "Position on map The mapper manual lists the functions worldmap_x and worldmap_y, which supposedly return the player’s x and y positions on the world map. get_world_map_x/y_pos are included here anyway, because I was unable to get those original functions to work, or even to find any evidence that they existed in game. get_map_enter_position get_world_map_x_pos get_world_map_y_pos set_map_enter_position set_world_map_pos get_map_enter_position MACRO array get_map_enter_position() Returns an array of the player’s position data (index: 0 - tile, 1 - elevation, 2 - rotation) when entering the map through exit grids. If entering from the world map, the tile value will be -1. Should be called in map_enter_p_proc procedure to get the correct position data. get_world_map_x_pos int get_world_map_x_pos() get_world_map_y_pos int get_world_map_y_pos() set_map_enter_position MACRO void set_map_enter_position(int tile, int elevation, int rotation) Overrides the players entry position when entering the map through exit grids. Setting the tile to 0 will put the player on the start hex (default tile and elevation) of the map. Works only in map_enter_p_proc procedure. set_world_map_pos void set_world_map_pos(int x, int y)",
    "url": "/sfall-documentation/position-on-map/",
    "relUrl": "/position-on-map/"
  },
  "35": {
    "id": "35",
    "title": "Read",
    "content": "Read These functions take a memory address as the parameter and can read arbitrary pieces of Fallout’s address space. read_byte read_int read_short read_string read_byte int read_byte(int address) read_int int read_int(int address) read_short int read_short(int address) read_string int read_string(int address)",
    "url": "/sfall-documentation/read/",
    "relUrl": "/read/"
  },
  "36": {
    "id": "36",
    "title": "Scripting config files",
    "content": "Scripting config files get_ini_setting get_ini_string modified_ini get_ini_setting int get_ini_setting(string setting) Reads an integer value from an ini file in the fallout directory. It only takes a single argument; seperate the file name, section and key with a ‘ ’ character; e.g. myvar:=get_ini_setting(&quot;myini.ini|mysec|var1&quot;) If the file or key cannot be found, -1 is returned. The file name is limited to 63 chars, including the extension. The section name is limited to 32 characters. It can also be used to get sfall’s settings, by using ddraw.ini as the file name. get_ini_string string get_ini_string(string setting) Reads a string value from an ini file in the fallout directory. modified_ini int modified_ini Obsolete. Use the get_ini_setting function.",
    "url": "/sfall-documentation/scripting-config-files/",
    "relUrl": "/scripting-config-files/"
  },
  "37": {
    "id": "37",
    "title": "Sfall funcX",
    "content": "Sfall funcX sfall_func0 sfall_func1 sfall_func2 sfall_func3 sfall_func4 sfall_func5 sfall_func6 sfall_func0 any sfall_func0(char* funcName) Calls scripting function with given name and no arguments. sfall_func1 any sfall_func1(char* funcName, arg1) Calls scripting function with given name and 1 argument. sfall_func2 any sfall_func2(char* funcName, arg1, arg2) Calls scripting function with given name and 2 arguments. sfall_func3 any sfall_func3(char* funcName, arg1, arg2, arg3) Calls scripting function with given name and 3 arguments. sfall_func4 any sfall_func4(char* funcName, arg1, arg2, arg3, arg4) Calls scripting function with given name and 4 arguments. sfall_func5 any sfall_func5(char* funcName, arg1, arg2, arg3, arg4, arg5) Calls scripting function with given name and 5 arguments. sfall_func6 any sfall_func6(char* funcName, arg1, arg2, arg3, arg4, arg5, arg6) Calls scripting function with given name and 6 arguments",
    "url": "/sfall-documentation/sfall-funcx/",
    "relUrl": "/sfall-funcx/"
  },
  "38": {
    "id": "38",
    "title": "Skills",
    "content": "Skills get_available_skill_points get_critter_skill_points mod_skill_points_per_level set_available_skill_points set_base_skill_mod set_critter_skill_mod set_critter_skill_points set_skill_max sneak_success get_available_skill_points int get_available_skill_points() get_critter_skill_points int get_critter_skill_points(int critter, int skill) Will get the number of additional points a critter has in a skill, on top of whatever they have from their stats and other bonuses mod_skill_points_per_level void mod_skill_points_per_level(int value) Accepts a value of between -100 and 100, and modifies the number of skill points the player recieves when they level up. This is a modification of what would otherwise happen, rather than a replacement. The value is not saved into the save game, so should be reset in the game_loaded section of a script. set_available_skill_points void set_available_skill_points(int value) set_base_skill_mod void set_base_skill_mod(int max) set_critter_skill_mod void set_critter_skill_mod(CritterPtr, int max) set_critter_skill_points void set_critter_skill_points(int critter, int skill, int value) Will set the number of additional points a critter has in a skill, on top of whatever they have from their stats and other bonuses. Note that skill points are part of the proto, so calling it on a critter will affect all critters that share the same proto. set_skill_max void set_skill_max(int value) Can’t be used to increase the skill cap above 300. sneak_success int sneak_success Returns 1 if last sneak attempt (roll against skill) was successful, 0 otherwise. This calls an internal engine function which is used to determine the perception range of critters (which you can override using HOOK_WITHINPERCEPTION).",
    "url": "/sfall-documentation/skills/",
    "relUrl": "/skills/"
  },
  "39": {
    "id": "39",
    "title": "Sound and Movie",
    "content": "Sound and Movie eax_available mark_movie_played play_sfall_sound set_eax_environment set_movie_path stop_sfall_sound eax_available int eax_available mark_movie_played void mark_movie_played(int id) play_sfall_sound int play_sfall_sound(string file, int loop) Used to play mp3/wav/wma files. The path given is relative to the Fallout folder. Specify loop as 1 to loop the file continuously, or 0 otherwise. If you don’t wish to loop, it returns 0. If you do loop, it returns an id which can be passed back to stop_sfall_sound when you want to stop the effect. All sounds effects will be stopped on game reload, looping or not. Does not require AllowDShowSound to be set to 1 in ddraw.ini. set_eax_environment void set_eax_environment(int environment) set_movie_path void set_movie_path(string filename, int movieid) stop_sfall_sound void stop_sfall_sound(int ptr) Stops looping mp3/wav/wma files previously launched by play_sfall_sound. All sounds effects will be stopped on game reload, looping or not. Does not require AllowDShowSound to be set to 1 in ddraw.ini.",
    "url": "/sfall-documentation/sound-and-movie/",
    "relUrl": "/sound-and-movie/"
  },
  "40": {
    "id": "40",
    "title": "Stats",
    "content": "Stats The get/set_pc_base/extra_stat functions are equivalent to calling get/set_critter_base/extra_stat with dude_obj as the critter pointer. None of these stat functions take perks into account, and neither do they do range clamping to make sure the stats are valid. Use the normal get_critter_stat function to get a correctly perk adjusted and range clamped value for a stat. get_critter_base_stat get_critter_extra_stat get_pc_base_stat get_pc_extra_stat set_critter_base_stat set_critter_extra_stat set_pc_base_stat set_pc_extra_stat get_critter_base_stat int get_critter_base_stat(CritterPtr, int StatID) get_critter_extra_stat int get_critter_extra_stat(CritterPtr, int StatID) get_pc_base_stat int get_pc_base_stat(int StatID) get_pc_extra_stat int get_pc_extra_stat(int StatID) set_critter_base_stat void set_critter_base_stat(CritterPtr, int StatID, int value) set_critter_extra_stat void set_critter_extra_stat(CritterPtr, int StatID, int value) set_pc_base_stat void set_pc_base_stat(int StatID, int value) set_pc_extra_stat void set_pc_extra_stat(int StatID, int value)",
    "url": "/sfall-documentation/stats/",
    "relUrl": "/stats/"
  },
  "41": {
    "id": "41",
    "title": "String functions",
    "content": "String functions atof atoi charcode message_str_game sprintf string_split strlen substr atof float atof(string text) atoi int atoi(string text) charcode int charcode(string text) Returns ASCII code for the first character in given string. message_str_game string message_str_game(int fileId, int messageId) Works exactly the same as message_str, except you get messages from files in text/english/game folder. Use GAME_MSG_* defines or mstr_* macros from sfall.h to use specific msg file Additional game msg files added by ExtraGameMsgFileList setting will have consecutive fileIds assigned beginning from 0x2000. (e.g. if you set ExtraGameMsgFileList=foo,bar in ddraw.ini, foo.msg will be associated with 0x2000 and bar.msg with 0x2001.). If a file has a specific number assigned in ExtraGameMsgFileList, its fileId will be (0x2000 + assigned number). (e.g. with ExtraGameMsgFileList=foo,bar:2,foobar in ddraw.ini, bar.msg will be associated with 0x2002 and foobar.msg with 0x2003.) sprintf string sprintf(string format, any value) Formats given value using standart syntax of C printf function (google “printf” for format details). However it is limited to formatting only 1 value. Can be used to get character by ASCII code (“%c”). string_split array string_split(string, split) Takes a string and a seperator, searches the string for all instances of the seperator, and returns a temp array filled with the pieces of the string split at each instance. If you give an empty string as the seperator, the string is split into individual characters. You can use this to search for a substring in a string like this: strlen(get_array(string_split(haystack, needle), 0)) strlen int strlen(string text) Returns string length. substr string substr(string, start, length) Cuts a substring from a string starting at start up to length characters. If start is negative - it indicates starting position from the end of the string (for example substr(&quot;test&quot;, -2, 2) will return last 2 characters: “st”). If length is negative - it means so many characters will be omitted from the end of string (example: substr(&quot;test&quot;, 0, -2) will return string without last 2 characters: “te”)",
    "url": "/sfall-documentation/string-functions/",
    "relUrl": "/string-functions/"
  },
  "42": {
    "id": "42",
    "title": "Tiles",
    "content": "Tiles get_tile_fid obj_blocking_tile tile_get_objs tile_light tile_refresh_display tile_under_cursor get_tile_fid int get_tile_fid(int tile) obj_blocking_tile ObjectPtr obj_blocking_tile(int tileNum, int elevation, int blockingType) Returns first object blocking given tile using given blocking function or 0 if tile is clear. tile_get_objs array tile_get_objs(int tileNum, int elevation) Returns array of all objects at given tile. It will include any hidden, dead or system objects (like cursor), so make sure to check properly when iterating. tile_light int tile_light(int elevation, int tileNum) Returns light intensity at the given tile in range from 0 to 65535. tile_refresh_display MACRO void tile_refresh_display() Redraws the game scene (tiles, walls, objects, etc.). tile_under_cursor int tile_under_cursor",
    "url": "/sfall-documentation/tiles/",
    "relUrl": "/tiles/"
  },
  "43": {
    "id": "43",
    "title": "Time and Date",
    "content": "Time and Date get_uptime get_year get_uptime int get_uptime() Just a wrapper around the windows GetTickCount() function. It’s useful for making time fade effects in shaders, since they already have access to the current tick count. get_year int get_year",
    "url": "/sfall-documentation/time-and-date/",
    "relUrl": "/time-and-date/"
  },
  "44": {
    "id": "44",
    "title": "Virtual file system",
    "content": "Virtual file system The fs_* functions are used to manipulate a virtual file system. Files saved here should have paths relative to the data folder, and use backslashes as the directory separator. They will take precedence over files stored in the normal data folder. They will also be saved into save games if you set a flag for them using fs_resize(fileId, -1), so be avoid creating large files. Using fs_copy followed by fs_read_xxx, you can read the contents of existing files. fs_copy fs_create fs_delete fs_find fs_pos fs_read_byte fs_read_float fs_read_int fs_read_short fs_resize fs_seek fs_size fs_write_bstring fs_write_byte fs_write_float fs_write_int fs_write_short fs_write_string fs_copy int fs_copy(string path, string source) fs_create int fs_create(string path, int size) fs_delete void fs_delete(int id) fs_find int fs_find(string path) fs_pos int fs_pos(int id) fs_read_byte int fs_read_byte(int id) fs_read_float float fs_read_float(int id) fs_read_int int fs_read_int(int id) fs_read_short int fs_read_short(int id) fs_resize void fs_resize(int id, int size) fs_seek void fs_seek(int id, int pos) fs_size int fs_size(int id) fs_write_bstring void fs_write_bstring(int id, string data) fs_write_byte void fs_write_byte(int id, int data) fs_write_float void fs_write_float(int id, int data) fs_write_int void fs_write_int(int id, int data) fs_write_short void fs_write_short(int id, int data) fs_write_string void fs_write_string(int id, string data)",
    "url": "/sfall-documentation/virtual-file-system/",
    "relUrl": "/virtual-file-system/"
  },
  "45": {
    "id": "45",
    "title": "Weapons and Ammo",
    "content": "Weapons and Ammo get_weapon_ammo_count get_weapon_ammo_pid set_weapon_ammo_count set_weapon_ammo_pid get_weapon_ammo_count int get_weapon_ammo_count(ObjPtr weapon) get_weapon_ammo_pid int get_weapon_ammo_pid(ObjPtr weapon) set_weapon_ammo_count void set_weapon_ammo_count(ObjPtr weapon, int count) set_weapon_ammo_pid void set_weapon_ammo_pid(ObjPtr weapon, int pid)",
    "url": "/sfall-documentation/weapons-and-ammo/",
    "relUrl": "/weapons-and-ammo/"
  },
  "46": {
    "id": "46",
    "title": "Write",
    "content": "Write These functions take a memory address as the parameter and can write to arbitrary pieces of Fallout’s address None of these functions will work unless AllowUnsafeScripting is enabled in ddraw.ini. write_byte write_int write_short write_string write_byte UNSAFE void write_byte(int address, int value) write_int UNSAFE void write_int(int address, int value) write_short UNSAFE void write_short(int address, int value) write_string UNSAFE void write_string(int address, string value)",
    "url": "/sfall-documentation/write/",
    "relUrl": "/write/"
  }
  
}
